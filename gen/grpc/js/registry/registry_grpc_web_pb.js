/**
 * @fileoverview gRPC-Web generated client stub for registry.v1
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v0.0.0
// source: registry/registry.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var common_rarity_pb = require('../common/rarity_pb.js')
const proto = {};
proto.registry = {};
proto.registry.v1 = require('./registry_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.registry.v1.RegistryServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.registry.v1.RegistryServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.registry.v1.GetItemDefRequest,
 *   !proto.registry.v1.ItemDef>}
 */
const methodDescriptor_RegistryService_GetItemDef = new grpc.web.MethodDescriptor(
  '/registry.v1.RegistryService/GetItemDef',
  grpc.web.MethodType.UNARY,
  proto.registry.v1.GetItemDefRequest,
  proto.registry.v1.ItemDef,
  /**
   * @param {!proto.registry.v1.GetItemDefRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.registry.v1.ItemDef.deserializeBinary
);


/**
 * @param {!proto.registry.v1.GetItemDefRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.registry.v1.ItemDef)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.registry.v1.ItemDef>|undefined}
 *     The XHR Node Readable Stream
 */
proto.registry.v1.RegistryServiceClient.prototype.getItemDef =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/registry.v1.RegistryService/GetItemDef',
      request,
      metadata || {},
      methodDescriptor_RegistryService_GetItemDef,
      callback);
};


/**
 * @param {!proto.registry.v1.GetItemDefRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.registry.v1.ItemDef>}
 *     Promise that resolves to the response
 */
proto.registry.v1.RegistryServicePromiseClient.prototype.getItemDef =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/registry.v1.RegistryService/GetItemDef',
      request,
      metadata || {},
      methodDescriptor_RegistryService_GetItemDef);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.registry.v1.CreateItemDefRequest,
 *   !proto.registry.v1.CreateItemDefResponse>}
 */
const methodDescriptor_RegistryService_CreateItemDef = new grpc.web.MethodDescriptor(
  '/registry.v1.RegistryService/CreateItemDef',
  grpc.web.MethodType.UNARY,
  proto.registry.v1.CreateItemDefRequest,
  proto.registry.v1.CreateItemDefResponse,
  /**
   * @param {!proto.registry.v1.CreateItemDefRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.registry.v1.CreateItemDefResponse.deserializeBinary
);


/**
 * @param {!proto.registry.v1.CreateItemDefRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.registry.v1.CreateItemDefResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.registry.v1.CreateItemDefResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.registry.v1.RegistryServiceClient.prototype.createItemDef =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/registry.v1.RegistryService/CreateItemDef',
      request,
      metadata || {},
      methodDescriptor_RegistryService_CreateItemDef,
      callback);
};


/**
 * @param {!proto.registry.v1.CreateItemDefRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.registry.v1.CreateItemDefResponse>}
 *     Promise that resolves to the response
 */
proto.registry.v1.RegistryServicePromiseClient.prototype.createItemDef =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/registry.v1.RegistryService/CreateItemDef',
      request,
      metadata || {},
      methodDescriptor_RegistryService_CreateItemDef);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.registry.v1.UpdateItemDefRequest,
 *   !proto.registry.v1.UpdateItemDefResponse>}
 */
const methodDescriptor_RegistryService_UpdateItemDef = new grpc.web.MethodDescriptor(
  '/registry.v1.RegistryService/UpdateItemDef',
  grpc.web.MethodType.UNARY,
  proto.registry.v1.UpdateItemDefRequest,
  proto.registry.v1.UpdateItemDefResponse,
  /**
   * @param {!proto.registry.v1.UpdateItemDefRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.registry.v1.UpdateItemDefResponse.deserializeBinary
);


/**
 * @param {!proto.registry.v1.UpdateItemDefRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.registry.v1.UpdateItemDefResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.registry.v1.UpdateItemDefResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.registry.v1.RegistryServiceClient.prototype.updateItemDef =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/registry.v1.RegistryService/UpdateItemDef',
      request,
      metadata || {},
      methodDescriptor_RegistryService_UpdateItemDef,
      callback);
};


/**
 * @param {!proto.registry.v1.UpdateItemDefRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.registry.v1.UpdateItemDefResponse>}
 *     Promise that resolves to the response
 */
proto.registry.v1.RegistryServicePromiseClient.prototype.updateItemDef =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/registry.v1.RegistryService/UpdateItemDef',
      request,
      metadata || {},
      methodDescriptor_RegistryService_UpdateItemDef);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.registry.v1.GetAchievementDefRequest,
 *   !proto.registry.v1.AchievementDef>}
 */
const methodDescriptor_RegistryService_GetAchievementDef = new grpc.web.MethodDescriptor(
  '/registry.v1.RegistryService/GetAchievementDef',
  grpc.web.MethodType.UNARY,
  proto.registry.v1.GetAchievementDefRequest,
  proto.registry.v1.AchievementDef,
  /**
   * @param {!proto.registry.v1.GetAchievementDefRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.registry.v1.AchievementDef.deserializeBinary
);


/**
 * @param {!proto.registry.v1.GetAchievementDefRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.registry.v1.AchievementDef)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.registry.v1.AchievementDef>|undefined}
 *     The XHR Node Readable Stream
 */
proto.registry.v1.RegistryServiceClient.prototype.getAchievementDef =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/registry.v1.RegistryService/GetAchievementDef',
      request,
      metadata || {},
      methodDescriptor_RegistryService_GetAchievementDef,
      callback);
};


/**
 * @param {!proto.registry.v1.GetAchievementDefRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.registry.v1.AchievementDef>}
 *     Promise that resolves to the response
 */
proto.registry.v1.RegistryServicePromiseClient.prototype.getAchievementDef =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/registry.v1.RegistryService/GetAchievementDef',
      request,
      metadata || {},
      methodDescriptor_RegistryService_GetAchievementDef);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.registry.v1.CreateAchievementDefRequest,
 *   !proto.registry.v1.CreateAchievementDefResponse>}
 */
const methodDescriptor_RegistryService_CreateAchievementDef = new grpc.web.MethodDescriptor(
  '/registry.v1.RegistryService/CreateAchievementDef',
  grpc.web.MethodType.UNARY,
  proto.registry.v1.CreateAchievementDefRequest,
  proto.registry.v1.CreateAchievementDefResponse,
  /**
   * @param {!proto.registry.v1.CreateAchievementDefRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.registry.v1.CreateAchievementDefResponse.deserializeBinary
);


/**
 * @param {!proto.registry.v1.CreateAchievementDefRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.registry.v1.CreateAchievementDefResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.registry.v1.CreateAchievementDefResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.registry.v1.RegistryServiceClient.prototype.createAchievementDef =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/registry.v1.RegistryService/CreateAchievementDef',
      request,
      metadata || {},
      methodDescriptor_RegistryService_CreateAchievementDef,
      callback);
};


/**
 * @param {!proto.registry.v1.CreateAchievementDefRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.registry.v1.CreateAchievementDefResponse>}
 *     Promise that resolves to the response
 */
proto.registry.v1.RegistryServicePromiseClient.prototype.createAchievementDef =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/registry.v1.RegistryService/CreateAchievementDef',
      request,
      metadata || {},
      methodDescriptor_RegistryService_CreateAchievementDef);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.registry.v1.UpdateAchievementDefRequest,
 *   !proto.registry.v1.UpdateAchievementDefResponse>}
 */
const methodDescriptor_RegistryService_UpdateAchievementDef = new grpc.web.MethodDescriptor(
  '/registry.v1.RegistryService/UpdateAchievementDef',
  grpc.web.MethodType.UNARY,
  proto.registry.v1.UpdateAchievementDefRequest,
  proto.registry.v1.UpdateAchievementDefResponse,
  /**
   * @param {!proto.registry.v1.UpdateAchievementDefRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.registry.v1.UpdateAchievementDefResponse.deserializeBinary
);


/**
 * @param {!proto.registry.v1.UpdateAchievementDefRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.registry.v1.UpdateAchievementDefResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.registry.v1.UpdateAchievementDefResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.registry.v1.RegistryServiceClient.prototype.updateAchievementDef =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/registry.v1.RegistryService/UpdateAchievementDef',
      request,
      metadata || {},
      methodDescriptor_RegistryService_UpdateAchievementDef,
      callback);
};


/**
 * @param {!proto.registry.v1.UpdateAchievementDefRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.registry.v1.UpdateAchievementDefResponse>}
 *     Promise that resolves to the response
 */
proto.registry.v1.RegistryServicePromiseClient.prototype.updateAchievementDef =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/registry.v1.RegistryService/UpdateAchievementDef',
      request,
      metadata || {},
      methodDescriptor_RegistryService_UpdateAchievementDef);
};


module.exports = proto.registry.v1;

