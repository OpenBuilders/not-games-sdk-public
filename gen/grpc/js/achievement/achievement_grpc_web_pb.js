/**
 * @fileoverview gRPC-Web generated client stub for achievement.v1
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v0.0.0
// source: achievement/achievement.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var common_pagination_pb = require('../common/pagination_pb.js')
const proto = {};
proto.achievement = {};
proto.achievement.v1 = require('./achievement_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.achievement.v1.AchievementServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.achievement.v1.AchievementServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.achievement.v1.ListAchievementsRequest,
 *   !proto.achievement.v1.ListAchievementsResponse>}
 */
const methodDescriptor_AchievementService_ListAchievements = new grpc.web.MethodDescriptor(
  '/achievement.v1.AchievementService/ListAchievements',
  grpc.web.MethodType.UNARY,
  proto.achievement.v1.ListAchievementsRequest,
  proto.achievement.v1.ListAchievementsResponse,
  /**
   * @param {!proto.achievement.v1.ListAchievementsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.achievement.v1.ListAchievementsResponse.deserializeBinary
);


/**
 * @param {!proto.achievement.v1.ListAchievementsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.achievement.v1.ListAchievementsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.achievement.v1.ListAchievementsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.achievement.v1.AchievementServiceClient.prototype.listAchievements =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/achievement.v1.AchievementService/ListAchievements',
      request,
      metadata || {},
      methodDescriptor_AchievementService_ListAchievements,
      callback);
};


/**
 * @param {!proto.achievement.v1.ListAchievementsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.achievement.v1.ListAchievementsResponse>}
 *     Promise that resolves to the response
 */
proto.achievement.v1.AchievementServicePromiseClient.prototype.listAchievements =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/achievement.v1.AchievementService/ListAchievements',
      request,
      metadata || {},
      methodDescriptor_AchievementService_ListAchievements);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.achievement.v1.GetAchievementRequest,
 *   !proto.achievement.v1.Achievement>}
 */
const methodDescriptor_AchievementService_GetAchievement = new grpc.web.MethodDescriptor(
  '/achievement.v1.AchievementService/GetAchievement',
  grpc.web.MethodType.UNARY,
  proto.achievement.v1.GetAchievementRequest,
  proto.achievement.v1.Achievement,
  /**
   * @param {!proto.achievement.v1.GetAchievementRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.achievement.v1.Achievement.deserializeBinary
);


/**
 * @param {!proto.achievement.v1.GetAchievementRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.achievement.v1.Achievement)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.achievement.v1.Achievement>|undefined}
 *     The XHR Node Readable Stream
 */
proto.achievement.v1.AchievementServiceClient.prototype.getAchievement =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/achievement.v1.AchievementService/GetAchievement',
      request,
      metadata || {},
      methodDescriptor_AchievementService_GetAchievement,
      callback);
};


/**
 * @param {!proto.achievement.v1.GetAchievementRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.achievement.v1.Achievement>}
 *     Promise that resolves to the response
 */
proto.achievement.v1.AchievementServicePromiseClient.prototype.getAchievement =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/achievement.v1.AchievementService/GetAchievement',
      request,
      metadata || {},
      methodDescriptor_AchievementService_GetAchievement);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.achievement.v1.CreateAchievementsRequest,
 *   !proto.achievement.v1.CreateAchievementsResponse>}
 */
const methodDescriptor_AchievementService_CreateAchievements = new grpc.web.MethodDescriptor(
  '/achievement.v1.AchievementService/CreateAchievements',
  grpc.web.MethodType.UNARY,
  proto.achievement.v1.CreateAchievementsRequest,
  proto.achievement.v1.CreateAchievementsResponse,
  /**
   * @param {!proto.achievement.v1.CreateAchievementsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.achievement.v1.CreateAchievementsResponse.deserializeBinary
);


/**
 * @param {!proto.achievement.v1.CreateAchievementsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.achievement.v1.CreateAchievementsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.achievement.v1.CreateAchievementsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.achievement.v1.AchievementServiceClient.prototype.createAchievements =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/achievement.v1.AchievementService/CreateAchievements',
      request,
      metadata || {},
      methodDescriptor_AchievementService_CreateAchievements,
      callback);
};


/**
 * @param {!proto.achievement.v1.CreateAchievementsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.achievement.v1.CreateAchievementsResponse>}
 *     Promise that resolves to the response
 */
proto.achievement.v1.AchievementServicePromiseClient.prototype.createAchievements =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/achievement.v1.AchievementService/CreateAchievements',
      request,
      metadata || {},
      methodDescriptor_AchievementService_CreateAchievements);
};


module.exports = proto.achievement.v1;

