/**
 * @fileoverview gRPC-Web generated client stub for inventory.v1
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v0.0.0
// source: inventory/inventory.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var common_pagination_pb = require('../common/pagination_pb.js')

var common_rarity_pb = require('../common/rarity_pb.js')
const proto = {};
proto.inventory = {};
proto.inventory.v1 = require('./inventory_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.inventory.v1.InventoryServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.inventory.v1.InventoryServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.inventory.v1.ListItemsRequest,
 *   !proto.inventory.v1.ListItemsResponse>}
 */
const methodDescriptor_InventoryService_ListItems = new grpc.web.MethodDescriptor(
  '/inventory.v1.InventoryService/ListItems',
  grpc.web.MethodType.UNARY,
  proto.inventory.v1.ListItemsRequest,
  proto.inventory.v1.ListItemsResponse,
  /**
   * @param {!proto.inventory.v1.ListItemsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.inventory.v1.ListItemsResponse.deserializeBinary
);


/**
 * @param {!proto.inventory.v1.ListItemsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.inventory.v1.ListItemsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.inventory.v1.ListItemsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.inventory.v1.InventoryServiceClient.prototype.listItems =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/inventory.v1.InventoryService/ListItems',
      request,
      metadata || {},
      methodDescriptor_InventoryService_ListItems,
      callback);
};


/**
 * @param {!proto.inventory.v1.ListItemsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.inventory.v1.ListItemsResponse>}
 *     Promise that resolves to the response
 */
proto.inventory.v1.InventoryServicePromiseClient.prototype.listItems =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/inventory.v1.InventoryService/ListItems',
      request,
      metadata || {},
      methodDescriptor_InventoryService_ListItems);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.inventory.v1.GetItemRequest,
 *   !proto.inventory.v1.Item>}
 */
const methodDescriptor_InventoryService_GetItem = new grpc.web.MethodDescriptor(
  '/inventory.v1.InventoryService/GetItem',
  grpc.web.MethodType.UNARY,
  proto.inventory.v1.GetItemRequest,
  proto.inventory.v1.Item,
  /**
   * @param {!proto.inventory.v1.GetItemRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.inventory.v1.Item.deserializeBinary
);


/**
 * @param {!proto.inventory.v1.GetItemRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.inventory.v1.Item)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.inventory.v1.Item>|undefined}
 *     The XHR Node Readable Stream
 */
proto.inventory.v1.InventoryServiceClient.prototype.getItem =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/inventory.v1.InventoryService/GetItem',
      request,
      metadata || {},
      methodDescriptor_InventoryService_GetItem,
      callback);
};


/**
 * @param {!proto.inventory.v1.GetItemRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.inventory.v1.Item>}
 *     Promise that resolves to the response
 */
proto.inventory.v1.InventoryServicePromiseClient.prototype.getItem =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/inventory.v1.InventoryService/GetItem',
      request,
      metadata || {},
      methodDescriptor_InventoryService_GetItem);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.inventory.v1.ConsumeItemRequest,
 *   !proto.inventory.v1.ConsumeItemResponse>}
 */
const methodDescriptor_InventoryService_ConsumeItem = new grpc.web.MethodDescriptor(
  '/inventory.v1.InventoryService/ConsumeItem',
  grpc.web.MethodType.UNARY,
  proto.inventory.v1.ConsumeItemRequest,
  proto.inventory.v1.ConsumeItemResponse,
  /**
   * @param {!proto.inventory.v1.ConsumeItemRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.inventory.v1.ConsumeItemResponse.deserializeBinary
);


/**
 * @param {!proto.inventory.v1.ConsumeItemRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.inventory.v1.ConsumeItemResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.inventory.v1.ConsumeItemResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.inventory.v1.InventoryServiceClient.prototype.consumeItem =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/inventory.v1.InventoryService/ConsumeItem',
      request,
      metadata || {},
      methodDescriptor_InventoryService_ConsumeItem,
      callback);
};


/**
 * @param {!proto.inventory.v1.ConsumeItemRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.inventory.v1.ConsumeItemResponse>}
 *     Promise that resolves to the response
 */
proto.inventory.v1.InventoryServicePromiseClient.prototype.consumeItem =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/inventory.v1.InventoryService/ConsumeItem',
      request,
      metadata || {},
      methodDescriptor_InventoryService_ConsumeItem);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.inventory.v1.UnpackRequest,
 *   !proto.inventory.v1.UnpackResponse>}
 */
const methodDescriptor_InventoryService_Unpack = new grpc.web.MethodDescriptor(
  '/inventory.v1.InventoryService/Unpack',
  grpc.web.MethodType.UNARY,
  proto.inventory.v1.UnpackRequest,
  proto.inventory.v1.UnpackResponse,
  /**
   * @param {!proto.inventory.v1.UnpackRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.inventory.v1.UnpackResponse.deserializeBinary
);


/**
 * @param {!proto.inventory.v1.UnpackRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.inventory.v1.UnpackResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.inventory.v1.UnpackResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.inventory.v1.InventoryServiceClient.prototype.unpack =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/inventory.v1.InventoryService/Unpack',
      request,
      metadata || {},
      methodDescriptor_InventoryService_Unpack,
      callback);
};


/**
 * @param {!proto.inventory.v1.UnpackRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.inventory.v1.UnpackResponse>}
 *     Promise that resolves to the response
 */
proto.inventory.v1.InventoryServicePromiseClient.prototype.unpack =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/inventory.v1.InventoryService/Unpack',
      request,
      metadata || {},
      methodDescriptor_InventoryService_Unpack);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.inventory.v1.GenerateRequest,
 *   !proto.inventory.v1.GenerateResponse>}
 */
const methodDescriptor_InventoryService_Generate = new grpc.web.MethodDescriptor(
  '/inventory.v1.InventoryService/Generate',
  grpc.web.MethodType.UNARY,
  proto.inventory.v1.GenerateRequest,
  proto.inventory.v1.GenerateResponse,
  /**
   * @param {!proto.inventory.v1.GenerateRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.inventory.v1.GenerateResponse.deserializeBinary
);


/**
 * @param {!proto.inventory.v1.GenerateRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.inventory.v1.GenerateResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.inventory.v1.GenerateResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.inventory.v1.InventoryServiceClient.prototype.generate =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/inventory.v1.InventoryService/Generate',
      request,
      metadata || {},
      methodDescriptor_InventoryService_Generate,
      callback);
};


/**
 * @param {!proto.inventory.v1.GenerateRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.inventory.v1.GenerateResponse>}
 *     Promise that resolves to the response
 */
proto.inventory.v1.InventoryServicePromiseClient.prototype.generate =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/inventory.v1.InventoryService/Generate',
      request,
      metadata || {},
      methodDescriptor_InventoryService_Generate);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.inventory.v1.UpdateItemRequest,
 *   !proto.inventory.v1.UpdateItemResponse>}
 */
const methodDescriptor_InventoryService_UpdateItem = new grpc.web.MethodDescriptor(
  '/inventory.v1.InventoryService/UpdateItem',
  grpc.web.MethodType.UNARY,
  proto.inventory.v1.UpdateItemRequest,
  proto.inventory.v1.UpdateItemResponse,
  /**
   * @param {!proto.inventory.v1.UpdateItemRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.inventory.v1.UpdateItemResponse.deserializeBinary
);


/**
 * @param {!proto.inventory.v1.UpdateItemRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.inventory.v1.UpdateItemResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.inventory.v1.UpdateItemResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.inventory.v1.InventoryServiceClient.prototype.updateItem =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/inventory.v1.InventoryService/UpdateItem',
      request,
      metadata || {},
      methodDescriptor_InventoryService_UpdateItem,
      callback);
};


/**
 * @param {!proto.inventory.v1.UpdateItemRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.inventory.v1.UpdateItemResponse>}
 *     Promise that resolves to the response
 */
proto.inventory.v1.InventoryServicePromiseClient.prototype.updateItem =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/inventory.v1.InventoryService/UpdateItem',
      request,
      metadata || {},
      methodDescriptor_InventoryService_UpdateItem);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.inventory.v1.TransferItemRequest,
 *   !proto.inventory.v1.TransferItemResponse>}
 */
const methodDescriptor_InventoryService_TransferItem = new grpc.web.MethodDescriptor(
  '/inventory.v1.InventoryService/TransferItem',
  grpc.web.MethodType.UNARY,
  proto.inventory.v1.TransferItemRequest,
  proto.inventory.v1.TransferItemResponse,
  /**
   * @param {!proto.inventory.v1.TransferItemRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.inventory.v1.TransferItemResponse.deserializeBinary
);


/**
 * @param {!proto.inventory.v1.TransferItemRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.inventory.v1.TransferItemResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.inventory.v1.TransferItemResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.inventory.v1.InventoryServiceClient.prototype.transferItem =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/inventory.v1.InventoryService/TransferItem',
      request,
      metadata || {},
      methodDescriptor_InventoryService_TransferItem,
      callback);
};


/**
 * @param {!proto.inventory.v1.TransferItemRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.inventory.v1.TransferItemResponse>}
 *     Promise that resolves to the response
 */
proto.inventory.v1.InventoryServicePromiseClient.prototype.transferItem =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/inventory.v1.InventoryService/TransferItem',
      request,
      metadata || {},
      methodDescriptor_InventoryService_TransferItem);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.inventory.v1.StreamItemTransfersRequest,
 *   !proto.inventory.v1.StreamItemTransfersResponse>}
 */
const methodDescriptor_InventoryService_StreamItemTransfer = new grpc.web.MethodDescriptor(
  '/inventory.v1.InventoryService/StreamItemTransfer',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.inventory.v1.StreamItemTransfersRequest,
  proto.inventory.v1.StreamItemTransfersResponse,
  /**
   * @param {!proto.inventory.v1.StreamItemTransfersRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.inventory.v1.StreamItemTransfersResponse.deserializeBinary
);


/**
 * @param {!proto.inventory.v1.StreamItemTransfersRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.inventory.v1.StreamItemTransfersResponse>}
 *     The XHR Node Readable Stream
 */
proto.inventory.v1.InventoryServiceClient.prototype.streamItemTransfer =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/inventory.v1.InventoryService/StreamItemTransfer',
      request,
      metadata || {},
      methodDescriptor_InventoryService_StreamItemTransfer);
};


/**
 * @param {!proto.inventory.v1.StreamItemTransfersRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.inventory.v1.StreamItemTransfersResponse>}
 *     The XHR Node Readable Stream
 */
proto.inventory.v1.InventoryServicePromiseClient.prototype.streamItemTransfer =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/inventory.v1.InventoryService/StreamItemTransfer',
      request,
      metadata || {},
      methodDescriptor_InventoryService_StreamItemTransfer);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.inventory.v1.StreamItemRequest,
 *   !proto.inventory.v1.StreamItemResponse>}
 */
const methodDescriptor_InventoryService_StreamItem = new grpc.web.MethodDescriptor(
  '/inventory.v1.InventoryService/StreamItem',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.inventory.v1.StreamItemRequest,
  proto.inventory.v1.StreamItemResponse,
  /**
   * @param {!proto.inventory.v1.StreamItemRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.inventory.v1.StreamItemResponse.deserializeBinary
);


/**
 * @param {!proto.inventory.v1.StreamItemRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.inventory.v1.StreamItemResponse>}
 *     The XHR Node Readable Stream
 */
proto.inventory.v1.InventoryServiceClient.prototype.streamItem =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/inventory.v1.InventoryService/StreamItem',
      request,
      metadata || {},
      methodDescriptor_InventoryService_StreamItem);
};


/**
 * @param {!proto.inventory.v1.StreamItemRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.inventory.v1.StreamItemResponse>}
 *     The XHR Node Readable Stream
 */
proto.inventory.v1.InventoryServicePromiseClient.prototype.streamItem =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/inventory.v1.InventoryService/StreamItem',
      request,
      metadata || {},
      methodDescriptor_InventoryService_StreamItem);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.inventory.v1.AddGroupRequest,
 *   !proto.inventory.v1.AddGroupResponse>}
 */
const methodDescriptor_InventoryService_AddGroup = new grpc.web.MethodDescriptor(
  '/inventory.v1.InventoryService/AddGroup',
  grpc.web.MethodType.UNARY,
  proto.inventory.v1.AddGroupRequest,
  proto.inventory.v1.AddGroupResponse,
  /**
   * @param {!proto.inventory.v1.AddGroupRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.inventory.v1.AddGroupResponse.deserializeBinary
);


/**
 * @param {!proto.inventory.v1.AddGroupRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.inventory.v1.AddGroupResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.inventory.v1.AddGroupResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.inventory.v1.InventoryServiceClient.prototype.addGroup =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/inventory.v1.InventoryService/AddGroup',
      request,
      metadata || {},
      methodDescriptor_InventoryService_AddGroup,
      callback);
};


/**
 * @param {!proto.inventory.v1.AddGroupRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.inventory.v1.AddGroupResponse>}
 *     Promise that resolves to the response
 */
proto.inventory.v1.InventoryServicePromiseClient.prototype.addGroup =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/inventory.v1.InventoryService/AddGroup',
      request,
      metadata || {},
      methodDescriptor_InventoryService_AddGroup);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.inventory.v1.StreamItemTransfersAckRequest,
 *   !proto.inventory.v1.StreamItemTransfersAckResponse>}
 */
const methodDescriptor_InventoryService_StreamAckMessages = new grpc.web.MethodDescriptor(
  '/inventory.v1.InventoryService/StreamAckMessages',
  grpc.web.MethodType.UNARY,
  proto.inventory.v1.StreamItemTransfersAckRequest,
  proto.inventory.v1.StreamItemTransfersAckResponse,
  /**
   * @param {!proto.inventory.v1.StreamItemTransfersAckRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.inventory.v1.StreamItemTransfersAckResponse.deserializeBinary
);


/**
 * @param {!proto.inventory.v1.StreamItemTransfersAckRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.inventory.v1.StreamItemTransfersAckResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.inventory.v1.StreamItemTransfersAckResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.inventory.v1.InventoryServiceClient.prototype.streamAckMessages =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/inventory.v1.InventoryService/StreamAckMessages',
      request,
      metadata || {},
      methodDescriptor_InventoryService_StreamAckMessages,
      callback);
};


/**
 * @param {!proto.inventory.v1.StreamItemTransfersAckRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.inventory.v1.StreamItemTransfersAckResponse>}
 *     Promise that resolves to the response
 */
proto.inventory.v1.InventoryServicePromiseClient.prototype.streamAckMessages =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/inventory.v1.InventoryService/StreamAckMessages',
      request,
      metadata || {},
      methodDescriptor_InventoryService_StreamAckMessages);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.inventory.v1.AckStreamMessagesRequest,
 *   !proto.inventory.v1.AckStreamMessagesResponse>}
 */
const methodDescriptor_InventoryService_AckStreamMessages = new grpc.web.MethodDescriptor(
  '/inventory.v1.InventoryService/AckStreamMessages',
  grpc.web.MethodType.UNARY,
  proto.inventory.v1.AckStreamMessagesRequest,
  proto.inventory.v1.AckStreamMessagesResponse,
  /**
   * @param {!proto.inventory.v1.AckStreamMessagesRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.inventory.v1.AckStreamMessagesResponse.deserializeBinary
);


/**
 * @param {!proto.inventory.v1.AckStreamMessagesRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.inventory.v1.AckStreamMessagesResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.inventory.v1.AckStreamMessagesResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.inventory.v1.InventoryServiceClient.prototype.ackStreamMessages =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/inventory.v1.InventoryService/AckStreamMessages',
      request,
      metadata || {},
      methodDescriptor_InventoryService_AckStreamMessages,
      callback);
};


/**
 * @param {!proto.inventory.v1.AckStreamMessagesRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.inventory.v1.AckStreamMessagesResponse>}
 *     Promise that resolves to the response
 */
proto.inventory.v1.InventoryServicePromiseClient.prototype.ackStreamMessages =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/inventory.v1.InventoryService/AckStreamMessages',
      request,
      metadata || {},
      methodDescriptor_InventoryService_AckStreamMessages);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.inventory.v1.ListItemsByItemDefRequest,
 *   !proto.inventory.v1.ListItemsResponse>}
 */
const methodDescriptor_InventoryService_ListItemsByItemDef = new grpc.web.MethodDescriptor(
  '/inventory.v1.InventoryService/ListItemsByItemDef',
  grpc.web.MethodType.UNARY,
  proto.inventory.v1.ListItemsByItemDefRequest,
  proto.inventory.v1.ListItemsResponse,
  /**
   * @param {!proto.inventory.v1.ListItemsByItemDefRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.inventory.v1.ListItemsResponse.deserializeBinary
);


/**
 * @param {!proto.inventory.v1.ListItemsByItemDefRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.inventory.v1.ListItemsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.inventory.v1.ListItemsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.inventory.v1.InventoryServiceClient.prototype.listItemsByItemDef =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/inventory.v1.InventoryService/ListItemsByItemDef',
      request,
      metadata || {},
      methodDescriptor_InventoryService_ListItemsByItemDef,
      callback);
};


/**
 * @param {!proto.inventory.v1.ListItemsByItemDefRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.inventory.v1.ListItemsResponse>}
 *     Promise that resolves to the response
 */
proto.inventory.v1.InventoryServicePromiseClient.prototype.listItemsByItemDef =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/inventory.v1.InventoryService/ListItemsByItemDef',
      request,
      metadata || {},
      methodDescriptor_InventoryService_ListItemsByItemDef);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.inventory.v1.TransferLogRequest,
 *   !proto.inventory.v1.TransferLogResponse>}
 */
const methodDescriptor_InventoryService_TransferLog = new grpc.web.MethodDescriptor(
  '/inventory.v1.InventoryService/TransferLog',
  grpc.web.MethodType.UNARY,
  proto.inventory.v1.TransferLogRequest,
  proto.inventory.v1.TransferLogResponse,
  /**
   * @param {!proto.inventory.v1.TransferLogRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.inventory.v1.TransferLogResponse.deserializeBinary
);


/**
 * @param {!proto.inventory.v1.TransferLogRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.inventory.v1.TransferLogResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.inventory.v1.TransferLogResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.inventory.v1.InventoryServiceClient.prototype.transferLog =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/inventory.v1.InventoryService/TransferLog',
      request,
      metadata || {},
      methodDescriptor_InventoryService_TransferLog,
      callback);
};


/**
 * @param {!proto.inventory.v1.TransferLogRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.inventory.v1.TransferLogResponse>}
 *     Promise that resolves to the response
 */
proto.inventory.v1.InventoryServicePromiseClient.prototype.transferLog =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/inventory.v1.InventoryService/TransferLog',
      request,
      metadata || {},
      methodDescriptor_InventoryService_TransferLog);
};


module.exports = proto.inventory.v1;

