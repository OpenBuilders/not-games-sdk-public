// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: registry/registry.proto

package registry

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RegistryService_ListItemsDefs_FullMethodName        = "/registry.v1.RegistryService/ListItemsDefs"
	RegistryService_GetItemDef_FullMethodName           = "/registry.v1.RegistryService/GetItemDef"
	RegistryService_CreateItemDef_FullMethodName        = "/registry.v1.RegistryService/CreateItemDef"
	RegistryService_UpdateItemDef_FullMethodName        = "/registry.v1.RegistryService/UpdateItemDef"
	RegistryService_GetAchievementDef_FullMethodName    = "/registry.v1.RegistryService/GetAchievementDef"
	RegistryService_CreateAchievementDef_FullMethodName = "/registry.v1.RegistryService/CreateAchievementDef"
	RegistryService_UpdateAchievementDef_FullMethodName = "/registry.v1.RegistryService/UpdateAchievementDef"
)

// RegistryServiceClient is the client API for RegistryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegistryServiceClient interface {
	ListItemsDefs(ctx context.Context, in *ListItemsDefsRequest, opts ...grpc.CallOption) (*ListItemsDefsResponse, error)
	GetItemDef(ctx context.Context, in *GetItemDefRequest, opts ...grpc.CallOption) (*ItemDef, error)
	CreateItemDef(ctx context.Context, in *CreateItemDefRequest, opts ...grpc.CallOption) (*CreateItemDefResponse, error)
	UpdateItemDef(ctx context.Context, in *UpdateItemDefRequest, opts ...grpc.CallOption) (*UpdateItemDefResponse, error)
	GetAchievementDef(ctx context.Context, in *GetAchievementDefRequest, opts ...grpc.CallOption) (*AchievementDef, error)
	CreateAchievementDef(ctx context.Context, in *CreateAchievementDefRequest, opts ...grpc.CallOption) (*CreateAchievementDefResponse, error)
	UpdateAchievementDef(ctx context.Context, in *UpdateAchievementDefRequest, opts ...grpc.CallOption) (*UpdateAchievementDefResponse, error)
}

type registryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistryServiceClient(cc grpc.ClientConnInterface) RegistryServiceClient {
	return &registryServiceClient{cc}
}

func (c *registryServiceClient) ListItemsDefs(ctx context.Context, in *ListItemsDefsRequest, opts ...grpc.CallOption) (*ListItemsDefsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListItemsDefsResponse)
	err := c.cc.Invoke(ctx, RegistryService_ListItemsDefs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) GetItemDef(ctx context.Context, in *GetItemDefRequest, opts ...grpc.CallOption) (*ItemDef, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ItemDef)
	err := c.cc.Invoke(ctx, RegistryService_GetItemDef_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) CreateItemDef(ctx context.Context, in *CreateItemDefRequest, opts ...grpc.CallOption) (*CreateItemDefResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateItemDefResponse)
	err := c.cc.Invoke(ctx, RegistryService_CreateItemDef_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) UpdateItemDef(ctx context.Context, in *UpdateItemDefRequest, opts ...grpc.CallOption) (*UpdateItemDefResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateItemDefResponse)
	err := c.cc.Invoke(ctx, RegistryService_UpdateItemDef_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) GetAchievementDef(ctx context.Context, in *GetAchievementDefRequest, opts ...grpc.CallOption) (*AchievementDef, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AchievementDef)
	err := c.cc.Invoke(ctx, RegistryService_GetAchievementDef_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) CreateAchievementDef(ctx context.Context, in *CreateAchievementDefRequest, opts ...grpc.CallOption) (*CreateAchievementDefResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAchievementDefResponse)
	err := c.cc.Invoke(ctx, RegistryService_CreateAchievementDef_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServiceClient) UpdateAchievementDef(ctx context.Context, in *UpdateAchievementDefRequest, opts ...grpc.CallOption) (*UpdateAchievementDefResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateAchievementDefResponse)
	err := c.cc.Invoke(ctx, RegistryService_UpdateAchievementDef_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistryServiceServer is the server API for RegistryService service.
// All implementations must embed UnimplementedRegistryServiceServer
// for forward compatibility.
type RegistryServiceServer interface {
	ListItemsDefs(context.Context, *ListItemsDefsRequest) (*ListItemsDefsResponse, error)
	GetItemDef(context.Context, *GetItemDefRequest) (*ItemDef, error)
	CreateItemDef(context.Context, *CreateItemDefRequest) (*CreateItemDefResponse, error)
	UpdateItemDef(context.Context, *UpdateItemDefRequest) (*UpdateItemDefResponse, error)
	GetAchievementDef(context.Context, *GetAchievementDefRequest) (*AchievementDef, error)
	CreateAchievementDef(context.Context, *CreateAchievementDefRequest) (*CreateAchievementDefResponse, error)
	UpdateAchievementDef(context.Context, *UpdateAchievementDefRequest) (*UpdateAchievementDefResponse, error)
	mustEmbedUnimplementedRegistryServiceServer()
}

// UnimplementedRegistryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRegistryServiceServer struct{}

func (UnimplementedRegistryServiceServer) ListItemsDefs(context.Context, *ListItemsDefsRequest) (*ListItemsDefsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListItemsDefs not implemented")
}
func (UnimplementedRegistryServiceServer) GetItemDef(context.Context, *GetItemDefRequest) (*ItemDef, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItemDef not implemented")
}
func (UnimplementedRegistryServiceServer) CreateItemDef(context.Context, *CreateItemDefRequest) (*CreateItemDefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItemDef not implemented")
}
func (UnimplementedRegistryServiceServer) UpdateItemDef(context.Context, *UpdateItemDefRequest) (*UpdateItemDefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItemDef not implemented")
}
func (UnimplementedRegistryServiceServer) GetAchievementDef(context.Context, *GetAchievementDefRequest) (*AchievementDef, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAchievementDef not implemented")
}
func (UnimplementedRegistryServiceServer) CreateAchievementDef(context.Context, *CreateAchievementDefRequest) (*CreateAchievementDefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAchievementDef not implemented")
}
func (UnimplementedRegistryServiceServer) UpdateAchievementDef(context.Context, *UpdateAchievementDefRequest) (*UpdateAchievementDefResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAchievementDef not implemented")
}
func (UnimplementedRegistryServiceServer) mustEmbedUnimplementedRegistryServiceServer() {}
func (UnimplementedRegistryServiceServer) testEmbeddedByValue()                         {}

// UnsafeRegistryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegistryServiceServer will
// result in compilation errors.
type UnsafeRegistryServiceServer interface {
	mustEmbedUnimplementedRegistryServiceServer()
}

func RegisterRegistryServiceServer(s grpc.ServiceRegistrar, srv RegistryServiceServer) {
	// If the following call pancis, it indicates UnimplementedRegistryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RegistryService_ServiceDesc, srv)
}

func _RegistryService_ListItemsDefs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListItemsDefsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).ListItemsDefs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryService_ListItemsDefs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).ListItemsDefs(ctx, req.(*ListItemsDefsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_GetItemDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemDefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).GetItemDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryService_GetItemDef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).GetItemDef(ctx, req.(*GetItemDefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_CreateItemDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateItemDefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).CreateItemDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryService_CreateItemDef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).CreateItemDef(ctx, req.(*CreateItemDefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_UpdateItemDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItemDefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).UpdateItemDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryService_UpdateItemDef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).UpdateItemDef(ctx, req.(*UpdateItemDefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_GetAchievementDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAchievementDefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).GetAchievementDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryService_GetAchievementDef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).GetAchievementDef(ctx, req.(*GetAchievementDefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_CreateAchievementDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAchievementDefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).CreateAchievementDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryService_CreateAchievementDef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).CreateAchievementDef(ctx, req.(*CreateAchievementDefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryService_UpdateAchievementDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAchievementDefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServiceServer).UpdateAchievementDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryService_UpdateAchievementDef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServiceServer).UpdateAchievementDef(ctx, req.(*UpdateAchievementDefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegistryService_ServiceDesc is the grpc.ServiceDesc for RegistryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegistryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "registry.v1.RegistryService",
	HandlerType: (*RegistryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListItemsDefs",
			Handler:    _RegistryService_ListItemsDefs_Handler,
		},
		{
			MethodName: "GetItemDef",
			Handler:    _RegistryService_GetItemDef_Handler,
		},
		{
			MethodName: "CreateItemDef",
			Handler:    _RegistryService_CreateItemDef_Handler,
		},
		{
			MethodName: "UpdateItemDef",
			Handler:    _RegistryService_UpdateItemDef_Handler,
		},
		{
			MethodName: "GetAchievementDef",
			Handler:    _RegistryService_GetAchievementDef_Handler,
		},
		{
			MethodName: "CreateAchievementDef",
			Handler:    _RegistryService_CreateAchievementDef_Handler,
		},
		{
			MethodName: "UpdateAchievementDef",
			Handler:    _RegistryService_UpdateAchievementDef_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registry/registry.proto",
}
