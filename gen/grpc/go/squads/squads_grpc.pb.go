// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: squads/squads.proto

package squad

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SquadsService_StreamEvents_FullMethodName      = "/squad.v1.SquadsService/StreamEvents"
	SquadsService_AddGroup_FullMethodName          = "/squad.v1.SquadsService/AddGroup"
	SquadsService_StreamAckMessages_FullMethodName = "/squad.v1.SquadsService/StreamAckMessages"
)

// SquadsServiceClient is the client API for SquadsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SquadsServiceClient interface {
	StreamEvents(ctx context.Context, in *StreamEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamEventsResponse], error)
	AddGroup(ctx context.Context, in *AddGroupRequest, opts ...grpc.CallOption) (*AddGroupResponse, error)
	StreamAckMessages(ctx context.Context, in *StreamEventAckRequest, opts ...grpc.CallOption) (*StreamEventAckResponse, error)
}

type squadsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSquadsServiceClient(cc grpc.ClientConnInterface) SquadsServiceClient {
	return &squadsServiceClient{cc}
}

func (c *squadsServiceClient) StreamEvents(ctx context.Context, in *StreamEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamEventsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SquadsService_ServiceDesc.Streams[0], SquadsService_StreamEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamEventsRequest, StreamEventsResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SquadsService_StreamEventsClient = grpc.ServerStreamingClient[StreamEventsResponse]

func (c *squadsServiceClient) AddGroup(ctx context.Context, in *AddGroupRequest, opts ...grpc.CallOption) (*AddGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddGroupResponse)
	err := c.cc.Invoke(ctx, SquadsService_AddGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *squadsServiceClient) StreamAckMessages(ctx context.Context, in *StreamEventAckRequest, opts ...grpc.CallOption) (*StreamEventAckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StreamEventAckResponse)
	err := c.cc.Invoke(ctx, SquadsService_StreamAckMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SquadsServiceServer is the server API for SquadsService service.
// All implementations must embed UnimplementedSquadsServiceServer
// for forward compatibility.
type SquadsServiceServer interface {
	StreamEvents(*StreamEventsRequest, grpc.ServerStreamingServer[StreamEventsResponse]) error
	AddGroup(context.Context, *AddGroupRequest) (*AddGroupResponse, error)
	StreamAckMessages(context.Context, *StreamEventAckRequest) (*StreamEventAckResponse, error)
	mustEmbedUnimplementedSquadsServiceServer()
}

// UnimplementedSquadsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSquadsServiceServer struct{}

func (UnimplementedSquadsServiceServer) StreamEvents(*StreamEventsRequest, grpc.ServerStreamingServer[StreamEventsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}
func (UnimplementedSquadsServiceServer) AddGroup(context.Context, *AddGroupRequest) (*AddGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGroup not implemented")
}
func (UnimplementedSquadsServiceServer) StreamAckMessages(context.Context, *StreamEventAckRequest) (*StreamEventAckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamAckMessages not implemented")
}
func (UnimplementedSquadsServiceServer) mustEmbedUnimplementedSquadsServiceServer() {}
func (UnimplementedSquadsServiceServer) testEmbeddedByValue()                       {}

// UnsafeSquadsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SquadsServiceServer will
// result in compilation errors.
type UnsafeSquadsServiceServer interface {
	mustEmbedUnimplementedSquadsServiceServer()
}

func RegisterSquadsServiceServer(s grpc.ServiceRegistrar, srv SquadsServiceServer) {
	// If the following call pancis, it indicates UnimplementedSquadsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SquadsService_ServiceDesc, srv)
}

func _SquadsService_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SquadsServiceServer).StreamEvents(m, &grpc.GenericServerStream[StreamEventsRequest, StreamEventsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SquadsService_StreamEventsServer = grpc.ServerStreamingServer[StreamEventsResponse]

func _SquadsService_AddGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquadsServiceServer).AddGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SquadsService_AddGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquadsServiceServer).AddGroup(ctx, req.(*AddGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SquadsService_StreamAckMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamEventAckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SquadsServiceServer).StreamAckMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SquadsService_StreamAckMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SquadsServiceServer).StreamAckMessages(ctx, req.(*StreamEventAckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SquadsService_ServiceDesc is the grpc.ServiceDesc for SquadsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SquadsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "squad.v1.SquadsService",
	HandlerType: (*SquadsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddGroup",
			Handler:    _SquadsService_AddGroup_Handler,
		},
		{
			MethodName: "StreamAckMessages",
			Handler:    _SquadsService_StreamAckMessages_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEvents",
			Handler:       _SquadsService_StreamEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "squads/squads.proto",
}
