// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: inventory/inventory.proto

package inventory

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	InventoryService_ListItems_FullMethodName          = "/inventory.v1.InventoryService/ListItems"
	InventoryService_GetItem_FullMethodName            = "/inventory.v1.InventoryService/GetItem"
	InventoryService_ConsumeItem_FullMethodName        = "/inventory.v1.InventoryService/ConsumeItem"
	InventoryService_Unpack_FullMethodName             = "/inventory.v1.InventoryService/Unpack"
	InventoryService_Generate_FullMethodName           = "/inventory.v1.InventoryService/Generate"
	InventoryService_UpdateItem_FullMethodName         = "/inventory.v1.InventoryService/UpdateItem"
	InventoryService_TransferItem_FullMethodName       = "/inventory.v1.InventoryService/TransferItem"
	InventoryService_StreamItemTransfer_FullMethodName = "/inventory.v1.InventoryService/StreamItemTransfer"
	InventoryService_StreamItem_FullMethodName         = "/inventory.v1.InventoryService/StreamItem"
	InventoryService_AddGroup_FullMethodName           = "/inventory.v1.InventoryService/AddGroup"
	InventoryService_StreamAckMessages_FullMethodName  = "/inventory.v1.InventoryService/StreamAckMessages"
	InventoryService_AckStreamMessages_FullMethodName  = "/inventory.v1.InventoryService/AckStreamMessages"
	InventoryService_ListItemsByItemDef_FullMethodName = "/inventory.v1.InventoryService/ListItemsByItemDef"
)

// InventoryServiceClient is the client API for InventoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InventoryServiceClient interface {
	ListItems(ctx context.Context, in *ListItemsRequest, opts ...grpc.CallOption) (*ListItemsResponse, error)
	GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*Item, error)
	ConsumeItem(ctx context.Context, in *ConsumeItemRequest, opts ...grpc.CallOption) (*ConsumeItemResponse, error)
	Unpack(ctx context.Context, in *UnpackRequest, opts ...grpc.CallOption) (*UnpackResponse, error)
	Generate(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*GenerateResponse, error)
	UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*UpdateItemResponse, error)
	TransferItem(ctx context.Context, in *TransferItemRequest, opts ...grpc.CallOption) (*TransferItemResponse, error)
	StreamItemTransfer(ctx context.Context, in *StreamItemTransfersRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamItemTransfersResponse], error)
	StreamItem(ctx context.Context, in *StreamItemRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamItemResponse], error)
	AddGroup(ctx context.Context, in *AddGroupRequest, opts ...grpc.CallOption) (*AddGroupResponse, error)
	StreamAckMessages(ctx context.Context, in *StreamItemTransfersAckRequest, opts ...grpc.CallOption) (*StreamItemTransfersAckResponse, error)
	AckStreamMessages(ctx context.Context, in *AckStreamMessagesRequest, opts ...grpc.CallOption) (*AckStreamMessagesResponse, error)
	ListItemsByItemDef(ctx context.Context, in *ListItemsByItemDefRequest, opts ...grpc.CallOption) (*ListItemsResponse, error)
}

type inventoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryServiceClient(cc grpc.ClientConnInterface) InventoryServiceClient {
	return &inventoryServiceClient{cc}
}

func (c *inventoryServiceClient) ListItems(ctx context.Context, in *ListItemsRequest, opts ...grpc.CallOption) (*ListItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListItemsResponse)
	err := c.cc.Invoke(ctx, InventoryService_ListItems_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetItem(ctx context.Context, in *GetItemRequest, opts ...grpc.CallOption) (*Item, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Item)
	err := c.cc.Invoke(ctx, InventoryService_GetItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ConsumeItem(ctx context.Context, in *ConsumeItemRequest, opts ...grpc.CallOption) (*ConsumeItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConsumeItemResponse)
	err := c.cc.Invoke(ctx, InventoryService_ConsumeItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) Unpack(ctx context.Context, in *UnpackRequest, opts ...grpc.CallOption) (*UnpackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UnpackResponse)
	err := c.cc.Invoke(ctx, InventoryService_Unpack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) Generate(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*GenerateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateResponse)
	err := c.cc.Invoke(ctx, InventoryService_Generate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) UpdateItem(ctx context.Context, in *UpdateItemRequest, opts ...grpc.CallOption) (*UpdateItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateItemResponse)
	err := c.cc.Invoke(ctx, InventoryService_UpdateItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) TransferItem(ctx context.Context, in *TransferItemRequest, opts ...grpc.CallOption) (*TransferItemResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TransferItemResponse)
	err := c.cc.Invoke(ctx, InventoryService_TransferItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) StreamItemTransfer(ctx context.Context, in *StreamItemTransfersRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamItemTransfersResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &InventoryService_ServiceDesc.Streams[0], InventoryService_StreamItemTransfer_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamItemTransfersRequest, StreamItemTransfersResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type InventoryService_StreamItemTransferClient = grpc.ServerStreamingClient[StreamItemTransfersResponse]

func (c *inventoryServiceClient) StreamItem(ctx context.Context, in *StreamItemRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[StreamItemResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &InventoryService_ServiceDesc.Streams[1], InventoryService_StreamItem_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamItemRequest, StreamItemResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type InventoryService_StreamItemClient = grpc.ServerStreamingClient[StreamItemResponse]

func (c *inventoryServiceClient) AddGroup(ctx context.Context, in *AddGroupRequest, opts ...grpc.CallOption) (*AddGroupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddGroupResponse)
	err := c.cc.Invoke(ctx, InventoryService_AddGroup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) StreamAckMessages(ctx context.Context, in *StreamItemTransfersAckRequest, opts ...grpc.CallOption) (*StreamItemTransfersAckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StreamItemTransfersAckResponse)
	err := c.cc.Invoke(ctx, InventoryService_StreamAckMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) AckStreamMessages(ctx context.Context, in *AckStreamMessagesRequest, opts ...grpc.CallOption) (*AckStreamMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AckStreamMessagesResponse)
	err := c.cc.Invoke(ctx, InventoryService_AckStreamMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) ListItemsByItemDef(ctx context.Context, in *ListItemsByItemDefRequest, opts ...grpc.CallOption) (*ListItemsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListItemsResponse)
	err := c.cc.Invoke(ctx, InventoryService_ListItemsByItemDef_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryServiceServer is the server API for InventoryService service.
// All implementations must embed UnimplementedInventoryServiceServer
// for forward compatibility.
type InventoryServiceServer interface {
	ListItems(context.Context, *ListItemsRequest) (*ListItemsResponse, error)
	GetItem(context.Context, *GetItemRequest) (*Item, error)
	ConsumeItem(context.Context, *ConsumeItemRequest) (*ConsumeItemResponse, error)
	Unpack(context.Context, *UnpackRequest) (*UnpackResponse, error)
	Generate(context.Context, *GenerateRequest) (*GenerateResponse, error)
	UpdateItem(context.Context, *UpdateItemRequest) (*UpdateItemResponse, error)
	TransferItem(context.Context, *TransferItemRequest) (*TransferItemResponse, error)
	StreamItemTransfer(*StreamItemTransfersRequest, grpc.ServerStreamingServer[StreamItemTransfersResponse]) error
	StreamItem(*StreamItemRequest, grpc.ServerStreamingServer[StreamItemResponse]) error
	AddGroup(context.Context, *AddGroupRequest) (*AddGroupResponse, error)
	StreamAckMessages(context.Context, *StreamItemTransfersAckRequest) (*StreamItemTransfersAckResponse, error)
	AckStreamMessages(context.Context, *AckStreamMessagesRequest) (*AckStreamMessagesResponse, error)
	ListItemsByItemDef(context.Context, *ListItemsByItemDefRequest) (*ListItemsResponse, error)
	mustEmbedUnimplementedInventoryServiceServer()
}

// UnimplementedInventoryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInventoryServiceServer struct{}

func (UnimplementedInventoryServiceServer) ListItems(context.Context, *ListItemsRequest) (*ListItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListItems not implemented")
}
func (UnimplementedInventoryServiceServer) GetItem(context.Context, *GetItemRequest) (*Item, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedInventoryServiceServer) ConsumeItem(context.Context, *ConsumeItemRequest) (*ConsumeItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsumeItem not implemented")
}
func (UnimplementedInventoryServiceServer) Unpack(context.Context, *UnpackRequest) (*UnpackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unpack not implemented")
}
func (UnimplementedInventoryServiceServer) Generate(context.Context, *GenerateRequest) (*GenerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate not implemented")
}
func (UnimplementedInventoryServiceServer) UpdateItem(context.Context, *UpdateItemRequest) (*UpdateItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItem not implemented")
}
func (UnimplementedInventoryServiceServer) TransferItem(context.Context, *TransferItemRequest) (*TransferItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferItem not implemented")
}
func (UnimplementedInventoryServiceServer) StreamItemTransfer(*StreamItemTransfersRequest, grpc.ServerStreamingServer[StreamItemTransfersResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamItemTransfer not implemented")
}
func (UnimplementedInventoryServiceServer) StreamItem(*StreamItemRequest, grpc.ServerStreamingServer[StreamItemResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamItem not implemented")
}
func (UnimplementedInventoryServiceServer) AddGroup(context.Context, *AddGroupRequest) (*AddGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddGroup not implemented")
}
func (UnimplementedInventoryServiceServer) StreamAckMessages(context.Context, *StreamItemTransfersAckRequest) (*StreamItemTransfersAckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamAckMessages not implemented")
}
func (UnimplementedInventoryServiceServer) AckStreamMessages(context.Context, *AckStreamMessagesRequest) (*AckStreamMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AckStreamMessages not implemented")
}
func (UnimplementedInventoryServiceServer) ListItemsByItemDef(context.Context, *ListItemsByItemDefRequest) (*ListItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListItemsByItemDef not implemented")
}
func (UnimplementedInventoryServiceServer) mustEmbedUnimplementedInventoryServiceServer() {}
func (UnimplementedInventoryServiceServer) testEmbeddedByValue()                          {}

// UnsafeInventoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventoryServiceServer will
// result in compilation errors.
type UnsafeInventoryServiceServer interface {
	mustEmbedUnimplementedInventoryServiceServer()
}

func RegisterInventoryServiceServer(s grpc.ServiceRegistrar, srv InventoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedInventoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&InventoryService_ServiceDesc, srv)
}

func _InventoryService_ListItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ListItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_ListItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ListItems(ctx, req.(*ListItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_GetItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetItem(ctx, req.(*GetItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_ConsumeItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumeItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ConsumeItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_ConsumeItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ConsumeItem(ctx, req.(*ConsumeItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_Unpack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnpackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).Unpack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_Unpack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).Unpack(ctx, req.(*UnpackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_Generate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).Generate(ctx, req.(*GenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_UpdateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).UpdateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_UpdateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).UpdateItem(ctx, req.(*UpdateItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_TransferItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).TransferItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_TransferItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).TransferItem(ctx, req.(*TransferItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_StreamItemTransfer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamItemTransfersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InventoryServiceServer).StreamItemTransfer(m, &grpc.GenericServerStream[StreamItemTransfersRequest, StreamItemTransfersResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type InventoryService_StreamItemTransferServer = grpc.ServerStreamingServer[StreamItemTransfersResponse]

func _InventoryService_StreamItem_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamItemRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(InventoryServiceServer).StreamItem(m, &grpc.GenericServerStream[StreamItemRequest, StreamItemResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type InventoryService_StreamItemServer = grpc.ServerStreamingServer[StreamItemResponse]

func _InventoryService_AddGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).AddGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_AddGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).AddGroup(ctx, req.(*AddGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_StreamAckMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StreamItemTransfersAckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).StreamAckMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_StreamAckMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).StreamAckMessages(ctx, req.(*StreamItemTransfersAckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_AckStreamMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckStreamMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).AckStreamMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_AckStreamMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).AckStreamMessages(ctx, req.(*AckStreamMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_ListItemsByItemDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListItemsByItemDefRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).ListItemsByItemDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InventoryService_ListItemsByItemDef_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).ListItemsByItemDef(ctx, req.(*ListItemsByItemDefRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InventoryService_ServiceDesc is the grpc.ServiceDesc for InventoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InventoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inventory.v1.InventoryService",
	HandlerType: (*InventoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListItems",
			Handler:    _InventoryService_ListItems_Handler,
		},
		{
			MethodName: "GetItem",
			Handler:    _InventoryService_GetItem_Handler,
		},
		{
			MethodName: "ConsumeItem",
			Handler:    _InventoryService_ConsumeItem_Handler,
		},
		{
			MethodName: "Unpack",
			Handler:    _InventoryService_Unpack_Handler,
		},
		{
			MethodName: "Generate",
			Handler:    _InventoryService_Generate_Handler,
		},
		{
			MethodName: "UpdateItem",
			Handler:    _InventoryService_UpdateItem_Handler,
		},
		{
			MethodName: "TransferItem",
			Handler:    _InventoryService_TransferItem_Handler,
		},
		{
			MethodName: "AddGroup",
			Handler:    _InventoryService_AddGroup_Handler,
		},
		{
			MethodName: "StreamAckMessages",
			Handler:    _InventoryService_StreamAckMessages_Handler,
		},
		{
			MethodName: "AckStreamMessages",
			Handler:    _InventoryService_AckStreamMessages_Handler,
		},
		{
			MethodName: "ListItemsByItemDef",
			Handler:    _InventoryService_ListItemsByItemDef_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamItemTransfer",
			Handler:       _InventoryService_StreamItemTransfer_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamItem",
			Handler:       _InventoryService_StreamItem_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "inventory/inventory.proto",
}
