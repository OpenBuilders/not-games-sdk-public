// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: drops/drops.proto

package drops

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DropsService_CreateDrop_FullMethodName        = "/drops.v1.DropsService/CreateDrop"
	DropsService_CheckEligibility_FullMethodName  = "/drops.v1.DropsService/CheckEligibility"
	DropsService_WhitelistDropUser_FullMethodName = "/drops.v1.DropsService/WhitelistDropUser"
)

// DropsServiceClient is the client API for DropsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DropsServiceClient interface {
	CreateDrop(ctx context.Context, in *CreateDropRequest, opts ...grpc.CallOption) (*CreateDropResponse, error)
	CheckEligibility(ctx context.Context, in *CheckEligibilityRequest, opts ...grpc.CallOption) (*CheckEligibilityResponse, error)
	WhitelistDropUser(ctx context.Context, in *WhitelistDropUserRequest, opts ...grpc.CallOption) (*WhitelistDropUserResponse, error)
}

type dropsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDropsServiceClient(cc grpc.ClientConnInterface) DropsServiceClient {
	return &dropsServiceClient{cc}
}

func (c *dropsServiceClient) CreateDrop(ctx context.Context, in *CreateDropRequest, opts ...grpc.CallOption) (*CreateDropResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDropResponse)
	err := c.cc.Invoke(ctx, DropsService_CreateDrop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropsServiceClient) CheckEligibility(ctx context.Context, in *CheckEligibilityRequest, opts ...grpc.CallOption) (*CheckEligibilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckEligibilityResponse)
	err := c.cc.Invoke(ctx, DropsService_CheckEligibility_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dropsServiceClient) WhitelistDropUser(ctx context.Context, in *WhitelistDropUserRequest, opts ...grpc.CallOption) (*WhitelistDropUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WhitelistDropUserResponse)
	err := c.cc.Invoke(ctx, DropsService_WhitelistDropUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DropsServiceServer is the server API for DropsService service.
// All implementations must embed UnimplementedDropsServiceServer
// for forward compatibility.
type DropsServiceServer interface {
	CreateDrop(context.Context, *CreateDropRequest) (*CreateDropResponse, error)
	CheckEligibility(context.Context, *CheckEligibilityRequest) (*CheckEligibilityResponse, error)
	WhitelistDropUser(context.Context, *WhitelistDropUserRequest) (*WhitelistDropUserResponse, error)
	mustEmbedUnimplementedDropsServiceServer()
}

// UnimplementedDropsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDropsServiceServer struct{}

func (UnimplementedDropsServiceServer) CreateDrop(context.Context, *CreateDropRequest) (*CreateDropResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDrop not implemented")
}
func (UnimplementedDropsServiceServer) CheckEligibility(context.Context, *CheckEligibilityRequest) (*CheckEligibilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckEligibility not implemented")
}
func (UnimplementedDropsServiceServer) WhitelistDropUser(context.Context, *WhitelistDropUserRequest) (*WhitelistDropUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhitelistDropUser not implemented")
}
func (UnimplementedDropsServiceServer) mustEmbedUnimplementedDropsServiceServer() {}
func (UnimplementedDropsServiceServer) testEmbeddedByValue()                      {}

// UnsafeDropsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DropsServiceServer will
// result in compilation errors.
type UnsafeDropsServiceServer interface {
	mustEmbedUnimplementedDropsServiceServer()
}

func RegisterDropsServiceServer(s grpc.ServiceRegistrar, srv DropsServiceServer) {
	// If the following call pancis, it indicates UnimplementedDropsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DropsService_ServiceDesc, srv)
}

func _DropsService_CreateDrop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDropRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsServiceServer).CreateDrop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropsService_CreateDrop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsServiceServer).CreateDrop(ctx, req.(*CreateDropRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropsService_CheckEligibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckEligibilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsServiceServer).CheckEligibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropsService_CheckEligibility_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsServiceServer).CheckEligibility(ctx, req.(*CheckEligibilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DropsService_WhitelistDropUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WhitelistDropUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DropsServiceServer).WhitelistDropUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DropsService_WhitelistDropUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DropsServiceServer).WhitelistDropUser(ctx, req.(*WhitelistDropUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DropsService_ServiceDesc is the grpc.ServiceDesc for DropsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DropsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "drops.v1.DropsService",
	HandlerType: (*DropsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDrop",
			Handler:    _DropsService_CreateDrop_Handler,
		},
		{
			MethodName: "CheckEligibility",
			Handler:    _DropsService_CheckEligibility_Handler,
		},
		{
			MethodName: "WhitelistDropUser",
			Handler:    _DropsService_WhitelistDropUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "drops/drops.proto",
}
