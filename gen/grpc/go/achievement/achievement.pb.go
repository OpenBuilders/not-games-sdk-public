// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: achievement/achievement.proto

package achievement

import (
	common "github.com/OpenBuilders/not-games-sdk-public/gen/grpc/go/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Achievement struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	AchievementDefId string                 `protobuf:"bytes,1,opt,name=achievement_def_id,json=achievementDefId,proto3" json:"achievement_def_id,omitempty"`
	AchievementId    string                 `protobuf:"bytes,2,opt,name=achievement_id,json=achievementId,proto3" json:"achievement_id,omitempty"`
	AccountId        int64                  `protobuf:"varint,3,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	AppId            int64                  `protobuf:"varint,4,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	Name             string                 `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Description      string                 `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	IconUrl          string                 `protobuf:"bytes,7,opt,name=icon_url,json=iconUrl,proto3" json:"icon_url,omitempty"`
	Tags             string                 `protobuf:"bytes,8,opt,name=tags,proto3" json:"tags,omitempty"`
	Hidden           bool                   `protobuf:"varint,9,opt,name=hidden,proto3" json:"hidden,omitempty"`
	DisplayType      string                 `protobuf:"bytes,10,opt,name=display_type,json=displayType,proto3" json:"display_type,omitempty"`
	CreatedAt        string                 `protobuf:"bytes,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt        string                 `protobuf:"bytes,12,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DefaultTags      string                 `protobuf:"bytes,13,opt,name=default_tags,json=defaultTags,proto3" json:"default_tags,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Achievement) Reset() {
	*x = Achievement{}
	mi := &file_achievement_achievement_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Achievement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Achievement) ProtoMessage() {}

func (x *Achievement) ProtoReflect() protoreflect.Message {
	mi := &file_achievement_achievement_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Achievement.ProtoReflect.Descriptor instead.
func (*Achievement) Descriptor() ([]byte, []int) {
	return file_achievement_achievement_proto_rawDescGZIP(), []int{0}
}

func (x *Achievement) GetAchievementDefId() string {
	if x != nil {
		return x.AchievementDefId
	}
	return ""
}

func (x *Achievement) GetAchievementId() string {
	if x != nil {
		return x.AchievementId
	}
	return ""
}

func (x *Achievement) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *Achievement) GetAppId() int64 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *Achievement) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Achievement) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Achievement) GetIconUrl() string {
	if x != nil {
		return x.IconUrl
	}
	return ""
}

func (x *Achievement) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

func (x *Achievement) GetHidden() bool {
	if x != nil {
		return x.Hidden
	}
	return false
}

func (x *Achievement) GetDisplayType() string {
	if x != nil {
		return x.DisplayType
	}
	return ""
}

func (x *Achievement) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Achievement) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Achievement) GetDefaultTags() string {
	if x != nil {
		return x.DefaultTags
	}
	return ""
}

type ListAchievementsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AppId         *int64                 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3,oneof" json:"app_id,omitempty"`
	Limit         int32                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset        int32                  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAchievementsRequest) Reset() {
	*x = ListAchievementsRequest{}
	mi := &file_achievement_achievement_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAchievementsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAchievementsRequest) ProtoMessage() {}

func (x *ListAchievementsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_achievement_achievement_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAchievementsRequest.ProtoReflect.Descriptor instead.
func (*ListAchievementsRequest) Descriptor() ([]byte, []int) {
	return file_achievement_achievement_proto_rawDescGZIP(), []int{1}
}

func (x *ListAchievementsRequest) GetAppId() int64 {
	if x != nil && x.AppId != nil {
		return *x.AppId
	}
	return 0
}

func (x *ListAchievementsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListAchievementsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type ListAchievementsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Achievements  []*Achievement         `protobuf:"bytes,1,rep,name=achievements,proto3" json:"achievements,omitempty"`
	Pagination    *common.Pagination     `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListAchievementsResponse) Reset() {
	*x = ListAchievementsResponse{}
	mi := &file_achievement_achievement_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListAchievementsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAchievementsResponse) ProtoMessage() {}

func (x *ListAchievementsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_achievement_achievement_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAchievementsResponse.ProtoReflect.Descriptor instead.
func (*ListAchievementsResponse) Descriptor() ([]byte, []int) {
	return file_achievement_achievement_proto_rawDescGZIP(), []int{2}
}

func (x *ListAchievementsResponse) GetAchievements() []*Achievement {
	if x != nil {
		return x.Achievements
	}
	return nil
}

func (x *ListAchievementsResponse) GetPagination() *common.Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetAchievementRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AchievementId string                 `protobuf:"bytes,1,opt,name=achievement_id,json=achievementId,proto3" json:"achievement_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAchievementRequest) Reset() {
	*x = GetAchievementRequest{}
	mi := &file_achievement_achievement_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAchievementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAchievementRequest) ProtoMessage() {}

func (x *GetAchievementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_achievement_achievement_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAchievementRequest.ProtoReflect.Descriptor instead.
func (*GetAchievementRequest) Descriptor() ([]byte, []int) {
	return file_achievement_achievement_proto_rawDescGZIP(), []int{3}
}

func (x *GetAchievementRequest) GetAchievementId() string {
	if x != nil {
		return x.AchievementId
	}
	return ""
}

type CreateAchievementsRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	AchievementDefIds []string               `protobuf:"bytes,1,rep,name=achievement_def_ids,json=achievementDefIds,proto3" json:"achievement_def_ids,omitempty"`
	Tags              string                 `protobuf:"bytes,2,opt,name=tags,proto3" json:"tags,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CreateAchievementsRequest) Reset() {
	*x = CreateAchievementsRequest{}
	mi := &file_achievement_achievement_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAchievementsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAchievementsRequest) ProtoMessage() {}

func (x *CreateAchievementsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_achievement_achievement_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAchievementsRequest.ProtoReflect.Descriptor instead.
func (*CreateAchievementsRequest) Descriptor() ([]byte, []int) {
	return file_achievement_achievement_proto_rawDescGZIP(), []int{4}
}

func (x *CreateAchievementsRequest) GetAchievementDefIds() []string {
	if x != nil {
		return x.AchievementDefIds
	}
	return nil
}

func (x *CreateAchievementsRequest) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

type CreateAchievementsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Achievements  []*Achievement         `protobuf:"bytes,1,rep,name=achievements,proto3" json:"achievements,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateAchievementsResponse) Reset() {
	*x = CreateAchievementsResponse{}
	mi := &file_achievement_achievement_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateAchievementsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateAchievementsResponse) ProtoMessage() {}

func (x *CreateAchievementsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_achievement_achievement_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateAchievementsResponse.ProtoReflect.Descriptor instead.
func (*CreateAchievementsResponse) Descriptor() ([]byte, []int) {
	return file_achievement_achievement_proto_rawDescGZIP(), []int{5}
}

func (x *CreateAchievementsResponse) GetAchievements() []*Achievement {
	if x != nil {
		return x.Achievements
	}
	return nil
}

var File_achievement_achievement_proto protoreflect.FileDescriptor

const file_achievement_achievement_proto_rawDesc = "" +
	"\n" +
	"\x1dachievement/achievement.proto\x12\x0eachievement.v1\x1a\x17common/pagination.proto\"\x99\x03\n" +
	"\vAchievement\x12,\n" +
	"\x12achievement_def_id\x18\x01 \x01(\tR\x10achievementDefId\x12%\n" +
	"\x0eachievement_id\x18\x02 \x01(\tR\rachievementId\x12\x1d\n" +
	"\n" +
	"account_id\x18\x03 \x01(\x03R\taccountId\x12\x15\n" +
	"\x06app_id\x18\x04 \x01(\x03R\x05appId\x12\x12\n" +
	"\x04name\x18\x05 \x01(\tR\x04name\x12 \n" +
	"\vdescription\x18\x06 \x01(\tR\vdescription\x12\x19\n" +
	"\bicon_url\x18\a \x01(\tR\aiconUrl\x12\x12\n" +
	"\x04tags\x18\b \x01(\tR\x04tags\x12\x16\n" +
	"\x06hidden\x18\t \x01(\bR\x06hidden\x12!\n" +
	"\fdisplay_type\x18\n" +
	" \x01(\tR\vdisplayType\x12\x1d\n" +
	"\n" +
	"created_at\x18\v \x01(\tR\tcreatedAt\x12\x1d\n" +
	"\n" +
	"updated_at\x18\f \x01(\tR\tupdatedAt\x12!\n" +
	"\fdefault_tags\x18\r \x01(\tR\vdefaultTags\"n\n" +
	"\x17ListAchievementsRequest\x12\x1a\n" +
	"\x06app_id\x18\x01 \x01(\x03H\x00R\x05appId\x88\x01\x01\x12\x14\n" +
	"\x05limit\x18\x02 \x01(\x05R\x05limit\x12\x16\n" +
	"\x06offset\x18\x03 \x01(\x05R\x06offsetB\t\n" +
	"\a_app_id\"\x92\x01\n" +
	"\x18ListAchievementsResponse\x12?\n" +
	"\fachievements\x18\x01 \x03(\v2\x1b.achievement.v1.AchievementR\fachievements\x125\n" +
	"\n" +
	"pagination\x18\x02 \x01(\v2\x15.common.v1.PaginationR\n" +
	"pagination\">\n" +
	"\x15GetAchievementRequest\x12%\n" +
	"\x0eachievement_id\x18\x01 \x01(\tR\rachievementId\"_\n" +
	"\x19CreateAchievementsRequest\x12.\n" +
	"\x13achievement_def_ids\x18\x01 \x03(\tR\x11achievementDefIds\x12\x12\n" +
	"\x04tags\x18\x02 \x01(\tR\x04tags\"]\n" +
	"\x1aCreateAchievementsResponse\x12?\n" +
	"\fachievements\x18\x01 \x03(\v2\x1b.achievement.v1.AchievementR\fachievements2\xc4\x02\n" +
	"\x12AchievementService\x12g\n" +
	"\x10ListAchievements\x12'.achievement.v1.ListAchievementsRequest\x1a(.achievement.v1.ListAchievementsResponse\"\x00\x12V\n" +
	"\x0eGetAchievement\x12%.achievement.v1.GetAchievementRequest\x1a\x1b.achievement.v1.Achievement\"\x00\x12m\n" +
	"\x12CreateAchievements\x12).achievement.v1.CreateAchievementsRequest\x1a*.achievement.v1.CreateAchievementsResponse\"\x00BFZDgithub.com/OpenBuilders/not-games-sdk-public/gen/grpc/go/achievementb\x06proto3"

var (
	file_achievement_achievement_proto_rawDescOnce sync.Once
	file_achievement_achievement_proto_rawDescData []byte
)

func file_achievement_achievement_proto_rawDescGZIP() []byte {
	file_achievement_achievement_proto_rawDescOnce.Do(func() {
		file_achievement_achievement_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_achievement_achievement_proto_rawDesc), len(file_achievement_achievement_proto_rawDesc)))
	})
	return file_achievement_achievement_proto_rawDescData
}

var file_achievement_achievement_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_achievement_achievement_proto_goTypes = []any{
	(*Achievement)(nil),                // 0: achievement.v1.Achievement
	(*ListAchievementsRequest)(nil),    // 1: achievement.v1.ListAchievementsRequest
	(*ListAchievementsResponse)(nil),   // 2: achievement.v1.ListAchievementsResponse
	(*GetAchievementRequest)(nil),      // 3: achievement.v1.GetAchievementRequest
	(*CreateAchievementsRequest)(nil),  // 4: achievement.v1.CreateAchievementsRequest
	(*CreateAchievementsResponse)(nil), // 5: achievement.v1.CreateAchievementsResponse
	(*common.Pagination)(nil),          // 6: common.v1.Pagination
}
var file_achievement_achievement_proto_depIdxs = []int32{
	0, // 0: achievement.v1.ListAchievementsResponse.achievements:type_name -> achievement.v1.Achievement
	6, // 1: achievement.v1.ListAchievementsResponse.pagination:type_name -> common.v1.Pagination
	0, // 2: achievement.v1.CreateAchievementsResponse.achievements:type_name -> achievement.v1.Achievement
	1, // 3: achievement.v1.AchievementService.ListAchievements:input_type -> achievement.v1.ListAchievementsRequest
	3, // 4: achievement.v1.AchievementService.GetAchievement:input_type -> achievement.v1.GetAchievementRequest
	4, // 5: achievement.v1.AchievementService.CreateAchievements:input_type -> achievement.v1.CreateAchievementsRequest
	2, // 6: achievement.v1.AchievementService.ListAchievements:output_type -> achievement.v1.ListAchievementsResponse
	0, // 7: achievement.v1.AchievementService.GetAchievement:output_type -> achievement.v1.Achievement
	5, // 8: achievement.v1.AchievementService.CreateAchievements:output_type -> achievement.v1.CreateAchievementsResponse
	6, // [6:9] is the sub-list for method output_type
	3, // [3:6] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_achievement_achievement_proto_init() }
func file_achievement_achievement_proto_init() {
	if File_achievement_achievement_proto != nil {
		return
	}
	file_achievement_achievement_proto_msgTypes[1].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_achievement_achievement_proto_rawDesc), len(file_achievement_achievement_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_achievement_achievement_proto_goTypes,
		DependencyIndexes: file_achievement_achievement_proto_depIdxs,
		MessageInfos:      file_achievement_achievement_proto_msgTypes,
	}.Build()
	File_achievement_achievement_proto = out.File
	file_achievement_achievement_proto_goTypes = nil
	file_achievement_achievement_proto_depIdxs = nil
}
