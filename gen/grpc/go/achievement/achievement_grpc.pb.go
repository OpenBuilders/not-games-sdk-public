// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: achievement/achievement.proto

package achievement

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AchievementService_ListAchievements_FullMethodName   = "/achievement.v1.AchievementService/ListAchievements"
	AchievementService_GetAchievement_FullMethodName     = "/achievement.v1.AchievementService/GetAchievement"
	AchievementService_CreateAchievements_FullMethodName = "/achievement.v1.AchievementService/CreateAchievements"
)

// AchievementServiceClient is the client API for AchievementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AchievementServiceClient interface {
	ListAchievements(ctx context.Context, in *ListAchievementsRequest, opts ...grpc.CallOption) (*ListAchievementsResponse, error)
	GetAchievement(ctx context.Context, in *GetAchievementRequest, opts ...grpc.CallOption) (*Achievement, error)
	CreateAchievements(ctx context.Context, in *CreateAchievementsRequest, opts ...grpc.CallOption) (*CreateAchievementsResponse, error)
}

type achievementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAchievementServiceClient(cc grpc.ClientConnInterface) AchievementServiceClient {
	return &achievementServiceClient{cc}
}

func (c *achievementServiceClient) ListAchievements(ctx context.Context, in *ListAchievementsRequest, opts ...grpc.CallOption) (*ListAchievementsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAchievementsResponse)
	err := c.cc.Invoke(ctx, AchievementService_ListAchievements_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *achievementServiceClient) GetAchievement(ctx context.Context, in *GetAchievementRequest, opts ...grpc.CallOption) (*Achievement, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Achievement)
	err := c.cc.Invoke(ctx, AchievementService_GetAchievement_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *achievementServiceClient) CreateAchievements(ctx context.Context, in *CreateAchievementsRequest, opts ...grpc.CallOption) (*CreateAchievementsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateAchievementsResponse)
	err := c.cc.Invoke(ctx, AchievementService_CreateAchievements_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AchievementServiceServer is the server API for AchievementService service.
// All implementations must embed UnimplementedAchievementServiceServer
// for forward compatibility.
type AchievementServiceServer interface {
	ListAchievements(context.Context, *ListAchievementsRequest) (*ListAchievementsResponse, error)
	GetAchievement(context.Context, *GetAchievementRequest) (*Achievement, error)
	CreateAchievements(context.Context, *CreateAchievementsRequest) (*CreateAchievementsResponse, error)
	mustEmbedUnimplementedAchievementServiceServer()
}

// UnimplementedAchievementServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAchievementServiceServer struct{}

func (UnimplementedAchievementServiceServer) ListAchievements(context.Context, *ListAchievementsRequest) (*ListAchievementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAchievements not implemented")
}
func (UnimplementedAchievementServiceServer) GetAchievement(context.Context, *GetAchievementRequest) (*Achievement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAchievement not implemented")
}
func (UnimplementedAchievementServiceServer) CreateAchievements(context.Context, *CreateAchievementsRequest) (*CreateAchievementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAchievements not implemented")
}
func (UnimplementedAchievementServiceServer) mustEmbedUnimplementedAchievementServiceServer() {}
func (UnimplementedAchievementServiceServer) testEmbeddedByValue()                            {}

// UnsafeAchievementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AchievementServiceServer will
// result in compilation errors.
type UnsafeAchievementServiceServer interface {
	mustEmbedUnimplementedAchievementServiceServer()
}

func RegisterAchievementServiceServer(s grpc.ServiceRegistrar, srv AchievementServiceServer) {
	// If the following call pancis, it indicates UnimplementedAchievementServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AchievementService_ServiceDesc, srv)
}

func _AchievementService_ListAchievements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAchievementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AchievementServiceServer).ListAchievements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AchievementService_ListAchievements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AchievementServiceServer).ListAchievements(ctx, req.(*ListAchievementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AchievementService_GetAchievement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAchievementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AchievementServiceServer).GetAchievement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AchievementService_GetAchievement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AchievementServiceServer).GetAchievement(ctx, req.(*GetAchievementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AchievementService_CreateAchievements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAchievementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AchievementServiceServer).CreateAchievements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AchievementService_CreateAchievements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AchievementServiceServer).CreateAchievements(ctx, req.(*CreateAchievementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AchievementService_ServiceDesc is the grpc.ServiceDesc for AchievementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AchievementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "achievement.v1.AchievementService",
	HandlerType: (*AchievementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAchievements",
			Handler:    _AchievementService_ListAchievements_Handler,
		},
		{
			MethodName: "GetAchievement",
			Handler:    _AchievementService_GetAchievement_Handler,
		},
		{
			MethodName: "CreateAchievements",
			Handler:    _AchievementService_CreateAchievements_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "achievement/achievement.proto",
}
