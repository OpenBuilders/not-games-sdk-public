// @generated by protobuf-ts 2.11.1 with parameter add_pb_suffix
// @generated from protobuf file "inventory/inventory.proto" (package "inventory.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { InventoryService } from "./inventory_pb";
import type { StreamItemTransfersAckResponse } from "./inventory_pb";
import type { StreamItemTransfersAckRequest } from "./inventory_pb";
import type { AddGroupResponse } from "./inventory_pb";
import type { AddGroupRequest } from "./inventory_pb";
import type { StreamItemTransfersResponse } from "./inventory_pb";
import type { StreamItemTransfersRequest } from "./inventory_pb";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { TransferItemResponse } from "./inventory_pb";
import type { TransferItemRequest } from "./inventory_pb";
import type { UpdateItemResponse } from "./inventory_pb";
import type { UpdateItemRequest } from "./inventory_pb";
import type { GenerateResponse } from "./inventory_pb";
import type { GenerateRequest } from "./inventory_pb";
import type { UnpackResponse } from "./inventory_pb";
import type { UnpackRequest } from "./inventory_pb";
import type { ConsumeItemResponse } from "./inventory_pb";
import type { ConsumeItemRequest } from "./inventory_pb";
import type { Item } from "./inventory_pb";
import type { GetItemRequest } from "./inventory_pb";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ListItemsResponse } from "./inventory_pb";
import type { ListItemsRequest } from "./inventory_pb";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service inventory.v1.InventoryService
 */
export interface IInventoryServiceClient {
    /**
     * @generated from protobuf rpc: ListItems
     */
    listItems(input: ListItemsRequest, options?: RpcOptions): UnaryCall<ListItemsRequest, ListItemsResponse>;
    /**
     * @generated from protobuf rpc: GetItem
     */
    getItem(input: GetItemRequest, options?: RpcOptions): UnaryCall<GetItemRequest, Item>;
    /**
     * @generated from protobuf rpc: ConsumeItem
     */
    consumeItem(input: ConsumeItemRequest, options?: RpcOptions): UnaryCall<ConsumeItemRequest, ConsumeItemResponse>;
    /**
     * @generated from protobuf rpc: Unpack
     */
    unpack(input: UnpackRequest, options?: RpcOptions): UnaryCall<UnpackRequest, UnpackResponse>;
    /**
     * @generated from protobuf rpc: Generate
     */
    generate(input: GenerateRequest, options?: RpcOptions): UnaryCall<GenerateRequest, GenerateResponse>;
    /**
     * @generated from protobuf rpc: UpdateItem
     */
    updateItem(input: UpdateItemRequest, options?: RpcOptions): UnaryCall<UpdateItemRequest, UpdateItemResponse>;
    /**
     * @generated from protobuf rpc: TransferItem
     */
    transferItem(input: TransferItemRequest, options?: RpcOptions): UnaryCall<TransferItemRequest, TransferItemResponse>;
    /**
     * @generated from protobuf rpc: StreamItemTransfer
     */
    streamItemTransfer(input: StreamItemTransfersRequest, options?: RpcOptions): ServerStreamingCall<StreamItemTransfersRequest, StreamItemTransfersResponse>;
    /**
     * @generated from protobuf rpc: AddGroup
     */
    addGroup(input: AddGroupRequest, options?: RpcOptions): UnaryCall<AddGroupRequest, AddGroupResponse>;
    /**
     * @generated from protobuf rpc: StreamAckMessages
     */
    streamAckMessages(input: StreamItemTransfersAckRequest, options?: RpcOptions): UnaryCall<StreamItemTransfersAckRequest, StreamItemTransfersAckResponse>;
}
/**
 * @generated from protobuf service inventory.v1.InventoryService
 */
export class InventoryServiceClient implements IInventoryServiceClient, ServiceInfo {
    typeName = InventoryService.typeName;
    methods = InventoryService.methods;
    options = InventoryService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: ListItems
     */
    listItems(input: ListItemsRequest, options?: RpcOptions): UnaryCall<ListItemsRequest, ListItemsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListItemsRequest, ListItemsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetItem
     */
    getItem(input: GetItemRequest, options?: RpcOptions): UnaryCall<GetItemRequest, Item> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetItemRequest, Item>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ConsumeItem
     */
    consumeItem(input: ConsumeItemRequest, options?: RpcOptions): UnaryCall<ConsumeItemRequest, ConsumeItemResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<ConsumeItemRequest, ConsumeItemResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Unpack
     */
    unpack(input: UnpackRequest, options?: RpcOptions): UnaryCall<UnpackRequest, UnpackResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<UnpackRequest, UnpackResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Generate
     */
    generate(input: GenerateRequest, options?: RpcOptions): UnaryCall<GenerateRequest, GenerateResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<GenerateRequest, GenerateResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: UpdateItem
     */
    updateItem(input: UpdateItemRequest, options?: RpcOptions): UnaryCall<UpdateItemRequest, UpdateItemResponse> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<UpdateItemRequest, UpdateItemResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: TransferItem
     */
    transferItem(input: TransferItemRequest, options?: RpcOptions): UnaryCall<TransferItemRequest, TransferItemResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<TransferItemRequest, TransferItemResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: StreamItemTransfer
     */
    streamItemTransfer(input: StreamItemTransfersRequest, options?: RpcOptions): ServerStreamingCall<StreamItemTransfersRequest, StreamItemTransfersResponse> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<StreamItemTransfersRequest, StreamItemTransfersResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AddGroup
     */
    addGroup(input: AddGroupRequest, options?: RpcOptions): UnaryCall<AddGroupRequest, AddGroupResponse> {
        const method = this.methods[8], opt = this._transport.mergeOptions(options);
        return stackIntercept<AddGroupRequest, AddGroupResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: StreamAckMessages
     */
    streamAckMessages(input: StreamItemTransfersAckRequest, options?: RpcOptions): UnaryCall<StreamItemTransfersAckRequest, StreamItemTransfersAckResponse> {
        const method = this.methods[9], opt = this._transport.mergeOptions(options);
        return stackIntercept<StreamItemTransfersAckRequest, StreamItemTransfersAckResponse>("unary", this._transport, method, opt, input);
    }
}
