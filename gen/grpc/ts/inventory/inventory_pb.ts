// @generated by protobuf-ts 2.11.1 with parameter add_pb_suffix
// @generated from protobuf file "inventory/inventory.proto" (package "inventory.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Pagination } from "../common/pagination_pb";
import { Rarity } from "../common/rarity_pb";
/**
 * @generated from protobuf message inventory.v1.Item
 */
export interface Item {
    /**
     * @generated from protobuf field: string item_def_id = 1
     */
    itemDefId: string;
    /**
     * @generated from protobuf field: int64 account_id = 2
     */
    accountId: bigint;
    /**
     * @generated from protobuf field: string item_id = 3
     */
    itemId: string;
    /**
     * @generated from protobuf field: int64 app_id = 4
     */
    appId: bigint;
    /**
     * @generated from protobuf field: string name = 5
     */
    name: string;
    /**
     * @generated from protobuf field: string description = 6
     */
    description: string;
    /**
     * @generated from protobuf field: string icon_url = 7
     */
    iconUrl: string;
    /**
     * @generated from protobuf field: string tags = 8
     */
    tags: string;
    /**
     * @generated from protobuf field: bool tradable = 9
     */
    tradable: boolean;
    /**
     * @generated from protobuf field: int32 quantity = 10
     */
    quantity: number;
    /**
     * @generated from protobuf field: string type = 11
     */
    type: string;
    /**
     * @generated from protobuf field: string display_type = 12
     */
    displayType: string;
    /**
     * @generated from protobuf field: bool marketable = 13
     */
    marketable: boolean;
    /**
     * @generated from protobuf field: string app_files = 14
     */
    appFiles: string;
    /**
     * @generated from protobuf field: string collection = 15
     */
    collection: string;
    /**
     * @generated from protobuf field: bool hidden = 16
     */
    hidden: boolean;
    /**
     * @generated from protobuf field: bool game_only = 17
     */
    gameOnly: boolean;
    /**
     * @generated from protobuf field: string created_at = 18
     */
    createdAt: string;
    /**
     * @generated from protobuf field: string updated_at = 19
     */
    updatedAt: string;
    /**
     * @generated from protobuf field: string app_meta = 20
     */
    appMeta: string;
    /**
     * @generated from protobuf field: int64 serial = 21
     */
    serial: bigint;
    /**
     * @generated from protobuf field: int64 supply = 22
     */
    supply: bigint;
    /**
     * @generated from protobuf field: string default_tags = 23
     */
    defaultTags: string;
    /**
     * @generated from protobuf field: common.v1.Rarity rarity = 24
     */
    rarity: Rarity;
    /**
     * @generated from protobuf field: int64 issued = 25
     */
    issued: bigint;
    /**
     * @generated from protobuf field: int64 hold_till = 26
     */
    holdTill: bigint;
}
/**
 * @generated from protobuf message inventory.v1.GetItemRequest
 */
export interface GetItemRequest {
    /**
     * @generated from protobuf field: string item_id = 1
     */
    itemId: string;
    /**
     * @generated from protobuf field: int64 app_id = 2
     */
    appId: bigint;
}
/**
 * @generated from protobuf message inventory.v1.ListItemsRequest
 */
export interface ListItemsRequest {
    /**
     * @generated from protobuf field: int64 account_id = 1
     */
    accountId: bigint;
    /**
     * @generated from protobuf field: int32 limit = 2
     */
    limit: number;
    /**
     * @generated from protobuf field: int32 offset = 3
     */
    offset: number;
    /**
     * @generated from protobuf field: optional string item_def_id = 4
     */
    itemDefId?: string;
    /**
     * @generated from protobuf field: optional string collection = 5
     */
    collection?: string;
    /**
     * @generated from protobuf field: optional string name = 6
     */
    name?: string;
    /**
     * @generated from protobuf field: optional common.v1.Rarity rarity = 7
     */
    rarity?: Rarity;
    /**
     * @generated from protobuf field: optional string type = 8
     */
    type?: string;
    /**
     * @generated from protobuf field: optional string display_type = 9
     */
    displayType?: string;
    /**
     * @generated from protobuf field: optional bool hidden = 10
     */
    hidden?: boolean;
    /**
     * @generated from protobuf field: optional bool gameOnly = 11
     */
    gameOnly?: boolean;
    /**
     * @generated from protobuf field: optional bool store_hidden = 12
     */
    storeHidden?: boolean;
    /**
     * @generated from protobuf field: optional bool tradable = 13
     */
    tradable?: boolean;
    /**
     * @generated from protobuf field: repeated string sort_fields = 14
     */
    sortFields: string[];
    /**
     * @generated from protobuf field: repeated string directions = 15
     */
    directions: string[];
}
/**
 * @generated from protobuf message inventory.v1.ListItemsByItemDefRequest
 */
export interface ListItemsByItemDefRequest {
    /**
     * @generated from protobuf field: string item_def_id = 1
     */
    itemDefId: string;
    /**
     * @generated from protobuf field: int32 limit = 2
     */
    limit: number;
    /**
     * @generated from protobuf field: int32 offset = 3
     */
    offset: number;
    /**
     * @generated from protobuf field: repeated string sort_fields = 4
     */
    sortFields: string[];
    /**
     * @generated from protobuf field: repeated string directions = 5
     */
    directions: string[];
}
/**
 * @generated from protobuf message inventory.v1.ListItemsResponse
 */
export interface ListItemsResponse {
    /**
     * @generated from protobuf field: repeated inventory.v1.Item items = 1
     */
    items: Item[];
    /**
     * @generated from protobuf field: common.v1.Pagination pagination = 2
     */
    pagination?: Pagination;
}
/**
 * @generated from protobuf message inventory.v1.ConsumeItemRequest
 */
export interface ConsumeItemRequest {
    /**
     * @generated from protobuf field: string item_id = 1
     */
    itemId: string;
    /**
     * @generated from protobuf field: int32 quantity = 2
     */
    quantity: number;
}
/**
 * @generated from protobuf message inventory.v1.ConsumeItemResponse
 */
export interface ConsumeItemResponse {
    /**
     * @generated from protobuf field: string status = 1
     */
    status: string;
}
/**
 * @generated from protobuf message inventory.v1.UnpackRequest
 */
export interface UnpackRequest {
    /**
     * @generated from protobuf field: string item_id = 1
     */
    itemId: string;
    /**
     * @generated from protobuf field: int64 account_id = 2
     */
    accountId: bigint;
    /**
     * @generated from protobuf field: int64 app_id = 3
     */
    appId: bigint;
    /**
     * @generated from protobuf field: string tags = 4
     */
    tags: string;
}
/**
 * @generated from protobuf message inventory.v1.UnpackResponse
 */
export interface UnpackResponse {
    /**
     * @generated from protobuf field: repeated string item_ids = 1
     */
    itemIds: string[];
}
/**
 * @generated from protobuf message inventory.v1.GenerateRequest
 */
export interface GenerateRequest {
    /**
     * @generated from protobuf field: string item_def_id = 1
     */
    itemDefId: string;
    /**
     * @generated from protobuf field: int64 account_id = 2
     */
    accountId: bigint;
    /**
     * @generated from protobuf field: int64 app_id = 3
     */
    appId: bigint;
    /**
     * @generated from protobuf field: string tags = 4
     */
    tags: string;
    /**
     * @generated from protobuf field: int64 hold_till = 5
     */
    holdTill: bigint;
    /**
     * @generated from protobuf field: optional string item_id = 6
     */
    itemId?: string;
    /**
     * @generated from protobuf field: optional string source_item_def_id = 7
     */
    sourceItemDefId?: string;
    /**
     * @generated from protobuf field: optional common.v1.Rarity rarity = 8
     */
    rarity?: Rarity;
    /**
     * @generated from protobuf field: optional string name = 9
     */
    name?: string;
    /**
     * @generated from protobuf field: optional string description = 10
     */
    description?: string;
    /**
     * @generated from protobuf field: optional string icon_url = 11
     */
    iconUrl?: string;
    /**
     * @generated from protobuf field: optional string app_files = 12
     */
    appFiles?: string;
    /**
     * @generated from protobuf field: optional string app_meta = 13
     */
    appMeta?: string;
}
/**
 * @generated from protobuf message inventory.v1.GenerateResponse
 */
export interface GenerateResponse {
    /**
     * @generated from protobuf field: string item_id = 1
     */
    itemId: string;
}
/**
 * @generated from protobuf message inventory.v1.UpdateItemRequest
 */
export interface UpdateItemRequest {
    /**
     * @generated from protobuf field: string item_id = 1
     */
    itemId: string;
    /**
     * @generated from protobuf field: optional string tags = 2
     */
    tags?: string;
    /**
     * @generated from protobuf field: optional string app_meta = 3
     */
    appMeta?: string;
    /**
     * @generated from protobuf field: common.v1.Rarity rarity = 4
     */
    rarity: Rarity;
    /**
     * @generated from protobuf field: optional int64 hold_till = 5
     */
    holdTill?: bigint;
}
/**
 * @generated from protobuf message inventory.v1.UpdateItemResponse
 */
export interface UpdateItemResponse {
    /**
     * @generated from protobuf field: string status = 1
     */
    status: string;
}
/**
 * @generated from protobuf message inventory.v1.TransferItemRequest
 */
export interface TransferItemRequest {
    /**
     * @generated from protobuf field: string item_id = 1
     */
    itemId: string;
    /**
     * @generated from protobuf field: int64 account_to = 2
     */
    accountTo: bigint;
    /**
     * @generated from protobuf field: string comment = 3
     */
    comment: string;
}
/**
 * @generated from protobuf message inventory.v1.TransferItemResponse
 */
export interface TransferItemResponse {
    /**
     * @generated from protobuf field: string status = 1
     */
    status: string;
}
/**
 * @generated from protobuf message inventory.v1.StreamItemTransfersRequest
 */
export interface StreamItemTransfersRequest {
    /**
     * @generated from protobuf field: string consumer = 1
     */
    consumer: string;
    /**
     * @generated from protobuf field: int64 limit = 2
     */
    limit: bigint;
    /**
     * @generated from protobuf field: bool ack_by_request = 3
     */
    ackByRequest: boolean;
}
/**
 * @generated from protobuf message inventory.v1.StreamItemTransfersResponse
 */
export interface StreamItemTransfersResponse {
    /**
     * @generated from protobuf field: string item_id = 1
     */
    itemId: string;
    /**
     * @generated from protobuf field: int64 account_from = 2
     */
    accountFrom: bigint;
    /**
     * @generated from protobuf field: int64 account_to = 3
     */
    accountTo: bigint;
    /**
     * @generated from protobuf field: int64 timestamp = 4
     */
    timestamp: bigint;
    /**
     * @generated from protobuf field: string tags = 5
     */
    tags: string;
    /**
     * @generated from protobuf field: string display_type = 6
     */
    displayType: string;
    /**
     * @generated from protobuf field: string item_def_id = 7
     */
    itemDefId: string;
    /**
     * @generated from protobuf field: string default_tags = 8
     */
    defaultTags: string;
    /**
     * @generated from protobuf field: string message_id = 9
     */
    messageId: string;
}
/**
 * @generated from protobuf message inventory.v1.StreamItemRequest
 */
export interface StreamItemRequest {
    /**
     * @generated from protobuf field: string consumer = 1
     */
    consumer: string;
    /**
     * @generated from protobuf field: int64 limit = 2
     */
    limit: bigint;
    /**
     * @generated from protobuf field: bool ack_by_request = 3
     */
    ackByRequest: boolean;
}
/**
 * @generated from protobuf message inventory.v1.StreamItemResponse
 */
export interface StreamItemResponse {
    /**
     * @generated from protobuf field: inventory.v1.Item item = 1
     */
    item?: Item;
    /**
     * @generated from protobuf field: inventory.v1.StreamItemOpType type = 2
     */
    type: StreamItemOpType;
    /**
     * @generated from protobuf field: string message_id = 3
     */
    messageId: string;
}
/**
 * @generated from protobuf message inventory.v1.AddGroupRequest
 */
export interface AddGroupRequest {
    /**
     * @generated from protobuf field: inventory.v1.StreamType type = 1
     */
    type: StreamType;
}
/**
 * @generated from protobuf message inventory.v1.AddGroupResponse
 */
export interface AddGroupResponse {
    /**
     * @generated from protobuf field: string status = 1
     */
    status: string;
}
/**
 * deprecated
 *
 * @generated from protobuf message inventory.v1.StreamItemTransfersAckRequest
 */
export interface StreamItemTransfersAckRequest {
    /**
     * @generated from protobuf field: repeated string messages = 1
     */
    messages: string[];
}
/**
 * deprecated
 *
 * @generated from protobuf message inventory.v1.StreamItemTransfersAckResponse
 */
export interface StreamItemTransfersAckResponse {
    /**
     * @generated from protobuf field: bool status = 1
     */
    status: boolean;
}
/**
 * @generated from protobuf message inventory.v1.AckStreamMessagesRequest
 */
export interface AckStreamMessagesRequest {
    /**
     * @generated from protobuf field: repeated string messages = 1
     */
    messages: string[];
    /**
     * @generated from protobuf field: inventory.v1.StreamType type = 2
     */
    type: StreamType;
}
/**
 * @generated from protobuf message inventory.v1.AckStreamMessagesResponse
 */
export interface AckStreamMessagesResponse {
    /**
     * @generated from protobuf field: bool status = 1
     */
    status: boolean;
}
/**
 * @generated from protobuf message inventory.v1.TransferLogRequest
 */
export interface TransferLogRequest {
    /**
     * @generated from protobuf field: string item_id = 1
     */
    itemId: string;
    /**
     * @generated from protobuf field: int32 limit = 2
     */
    limit: number;
    /**
     * @generated from protobuf field: int32 offset = 3
     */
    offset: number;
}
/**
 * @generated from protobuf message inventory.v1.TransferLogResponse
 */
export interface TransferLogResponse {
    /**
     * @generated from protobuf field: repeated inventory.v1.TransferLogResponse.Transfer transfers = 1
     */
    transfers: TransferLogResponse_Transfer[];
    /**
     * @generated from protobuf field: common.v1.Pagination pagination = 2
     */
    pagination?: Pagination;
}
/**
 * @generated from protobuf message inventory.v1.TransferLogResponse.Transfer
 */
export interface TransferLogResponse_Transfer {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
    /**
     * @generated from protobuf field: string created_at = 2
     */
    createdAt: string;
    /**
     * @generated from protobuf field: int64 account_id = 3
     */
    accountId: bigint;
    /**
     * @generated from protobuf field: optional string account_username = 4
     */
    accountUsername?: string;
    /**
     * @generated from protobuf field: optional string account_avatar = 5
     */
    accountAvatar?: string;
    /**
     * @generated from protobuf field: optional string account_firstname = 6
     */
    accountFirstname?: string;
    /**
     * @generated from protobuf field: optional string account_lastname = 7
     */
    accountLastname?: string;
}
/**
 * @generated from protobuf enum inventory.v1.StreamItemOpType
 */
export enum StreamItemOpType {
    /**
     * @generated from protobuf enum value: STREAM_ITEM_OP_TYPE_UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: STREAM_ITEM_OP_TYPE_CREATED = 1;
     */
    CREATED = 1,
    /**
     * @generated from protobuf enum value: STREAM_ITEM_OP_TYPE_BURNED = 2;
     */
    BURNED = 2
}
/**
 * @generated from protobuf enum inventory.v1.StreamType
 */
export enum StreamType {
    /**
     * @generated from protobuf enum value: STREAM_TYPE_UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: STREAM_TYPE_ITEM = 1;
     */
    ITEM = 1,
    /**
     * @generated from protobuf enum value: STREAM_TYPE_TRANSFER_ITEM = 2;
     */
    TRANSFER_ITEM = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class Item$Type extends MessageType<Item> {
    constructor() {
        super("inventory.v1.Item", [
            { no: 1, name: "item_def_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "account_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "app_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "icon_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "tags", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "tradable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "quantity", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "display_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "marketable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "app_files", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "collection", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "hidden", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 17, name: "game_only", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 18, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 19, name: "updated_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "app_meta", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 21, name: "serial", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 22, name: "supply", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 23, name: "default_tags", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 24, name: "rarity", kind: "enum", T: () => ["common.v1.Rarity", Rarity] },
            { no: 25, name: "issued", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 26, name: "hold_till", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<Item>): Item {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.itemDefId = "";
        message.accountId = 0n;
        message.itemId = "";
        message.appId = 0n;
        message.name = "";
        message.description = "";
        message.iconUrl = "";
        message.tags = "";
        message.tradable = false;
        message.quantity = 0;
        message.type = "";
        message.displayType = "";
        message.marketable = false;
        message.appFiles = "";
        message.collection = "";
        message.hidden = false;
        message.gameOnly = false;
        message.createdAt = "";
        message.updatedAt = "";
        message.appMeta = "";
        message.serial = 0n;
        message.supply = 0n;
        message.defaultTags = "";
        message.rarity = 0;
        message.issued = 0n;
        message.holdTill = 0n;
        if (value !== undefined)
            reflectionMergePartial<Item>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Item): Item {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string item_def_id */ 1:
                    message.itemDefId = reader.string();
                    break;
                case /* int64 account_id */ 2:
                    message.accountId = reader.int64().toBigInt();
                    break;
                case /* string item_id */ 3:
                    message.itemId = reader.string();
                    break;
                case /* int64 app_id */ 4:
                    message.appId = reader.int64().toBigInt();
                    break;
                case /* string name */ 5:
                    message.name = reader.string();
                    break;
                case /* string description */ 6:
                    message.description = reader.string();
                    break;
                case /* string icon_url */ 7:
                    message.iconUrl = reader.string();
                    break;
                case /* string tags */ 8:
                    message.tags = reader.string();
                    break;
                case /* bool tradable */ 9:
                    message.tradable = reader.bool();
                    break;
                case /* int32 quantity */ 10:
                    message.quantity = reader.int32();
                    break;
                case /* string type */ 11:
                    message.type = reader.string();
                    break;
                case /* string display_type */ 12:
                    message.displayType = reader.string();
                    break;
                case /* bool marketable */ 13:
                    message.marketable = reader.bool();
                    break;
                case /* string app_files */ 14:
                    message.appFiles = reader.string();
                    break;
                case /* string collection */ 15:
                    message.collection = reader.string();
                    break;
                case /* bool hidden */ 16:
                    message.hidden = reader.bool();
                    break;
                case /* bool game_only */ 17:
                    message.gameOnly = reader.bool();
                    break;
                case /* string created_at */ 18:
                    message.createdAt = reader.string();
                    break;
                case /* string updated_at */ 19:
                    message.updatedAt = reader.string();
                    break;
                case /* string app_meta */ 20:
                    message.appMeta = reader.string();
                    break;
                case /* int64 serial */ 21:
                    message.serial = reader.int64().toBigInt();
                    break;
                case /* int64 supply */ 22:
                    message.supply = reader.int64().toBigInt();
                    break;
                case /* string default_tags */ 23:
                    message.defaultTags = reader.string();
                    break;
                case /* common.v1.Rarity rarity */ 24:
                    message.rarity = reader.int32();
                    break;
                case /* int64 issued */ 25:
                    message.issued = reader.int64().toBigInt();
                    break;
                case /* int64 hold_till */ 26:
                    message.holdTill = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Item, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string item_def_id = 1; */
        if (message.itemDefId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.itemDefId);
        /* int64 account_id = 2; */
        if (message.accountId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.accountId);
        /* string item_id = 3; */
        if (message.itemId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.itemId);
        /* int64 app_id = 4; */
        if (message.appId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.appId);
        /* string name = 5; */
        if (message.name !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.name);
        /* string description = 6; */
        if (message.description !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.description);
        /* string icon_url = 7; */
        if (message.iconUrl !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.iconUrl);
        /* string tags = 8; */
        if (message.tags !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.tags);
        /* bool tradable = 9; */
        if (message.tradable !== false)
            writer.tag(9, WireType.Varint).bool(message.tradable);
        /* int32 quantity = 10; */
        if (message.quantity !== 0)
            writer.tag(10, WireType.Varint).int32(message.quantity);
        /* string type = 11; */
        if (message.type !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.type);
        /* string display_type = 12; */
        if (message.displayType !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.displayType);
        /* bool marketable = 13; */
        if (message.marketable !== false)
            writer.tag(13, WireType.Varint).bool(message.marketable);
        /* string app_files = 14; */
        if (message.appFiles !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.appFiles);
        /* string collection = 15; */
        if (message.collection !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.collection);
        /* bool hidden = 16; */
        if (message.hidden !== false)
            writer.tag(16, WireType.Varint).bool(message.hidden);
        /* bool game_only = 17; */
        if (message.gameOnly !== false)
            writer.tag(17, WireType.Varint).bool(message.gameOnly);
        /* string created_at = 18; */
        if (message.createdAt !== "")
            writer.tag(18, WireType.LengthDelimited).string(message.createdAt);
        /* string updated_at = 19; */
        if (message.updatedAt !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.updatedAt);
        /* string app_meta = 20; */
        if (message.appMeta !== "")
            writer.tag(20, WireType.LengthDelimited).string(message.appMeta);
        /* int64 serial = 21; */
        if (message.serial !== 0n)
            writer.tag(21, WireType.Varint).int64(message.serial);
        /* int64 supply = 22; */
        if (message.supply !== 0n)
            writer.tag(22, WireType.Varint).int64(message.supply);
        /* string default_tags = 23; */
        if (message.defaultTags !== "")
            writer.tag(23, WireType.LengthDelimited).string(message.defaultTags);
        /* common.v1.Rarity rarity = 24; */
        if (message.rarity !== 0)
            writer.tag(24, WireType.Varint).int32(message.rarity);
        /* int64 issued = 25; */
        if (message.issued !== 0n)
            writer.tag(25, WireType.Varint).int64(message.issued);
        /* int64 hold_till = 26; */
        if (message.holdTill !== 0n)
            writer.tag(26, WireType.Varint).int64(message.holdTill);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message inventory.v1.Item
 */
export const Item = new Item$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetItemRequest$Type extends MessageType<GetItemRequest> {
    constructor() {
        super("inventory.v1.GetItemRequest", [
            { no: 1, name: "item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "app_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<GetItemRequest>): GetItemRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.itemId = "";
        message.appId = 0n;
        if (value !== undefined)
            reflectionMergePartial<GetItemRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetItemRequest): GetItemRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string item_id */ 1:
                    message.itemId = reader.string();
                    break;
                case /* int64 app_id */ 2:
                    message.appId = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetItemRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string item_id = 1; */
        if (message.itemId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.itemId);
        /* int64 app_id = 2; */
        if (message.appId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.appId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message inventory.v1.GetItemRequest
 */
export const GetItemRequest = new GetItemRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListItemsRequest$Type extends MessageType<ListItemsRequest> {
    constructor() {
        super("inventory.v1.ListItemsRequest", [
            { no: 1, name: "account_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "offset", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "item_def_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "collection", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "rarity", kind: "enum", opt: true, T: () => ["common.v1.Rarity", Rarity] },
            { no: 8, name: "type", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "display_type", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "hidden", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "gameOnly", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "store_hidden", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "tradable", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "sort_fields", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "directions", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListItemsRequest>): ListItemsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.accountId = 0n;
        message.limit = 0;
        message.offset = 0;
        message.sortFields = [];
        message.directions = [];
        if (value !== undefined)
            reflectionMergePartial<ListItemsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListItemsRequest): ListItemsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 account_id */ 1:
                    message.accountId = reader.int64().toBigInt();
                    break;
                case /* int32 limit */ 2:
                    message.limit = reader.int32();
                    break;
                case /* int32 offset */ 3:
                    message.offset = reader.int32();
                    break;
                case /* optional string item_def_id */ 4:
                    message.itemDefId = reader.string();
                    break;
                case /* optional string collection */ 5:
                    message.collection = reader.string();
                    break;
                case /* optional string name */ 6:
                    message.name = reader.string();
                    break;
                case /* optional common.v1.Rarity rarity */ 7:
                    message.rarity = reader.int32();
                    break;
                case /* optional string type */ 8:
                    message.type = reader.string();
                    break;
                case /* optional string display_type */ 9:
                    message.displayType = reader.string();
                    break;
                case /* optional bool hidden */ 10:
                    message.hidden = reader.bool();
                    break;
                case /* optional bool gameOnly */ 11:
                    message.gameOnly = reader.bool();
                    break;
                case /* optional bool store_hidden */ 12:
                    message.storeHidden = reader.bool();
                    break;
                case /* optional bool tradable */ 13:
                    message.tradable = reader.bool();
                    break;
                case /* repeated string sort_fields */ 14:
                    message.sortFields.push(reader.string());
                    break;
                case /* repeated string directions */ 15:
                    message.directions.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListItemsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 account_id = 1; */
        if (message.accountId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.accountId);
        /* int32 limit = 2; */
        if (message.limit !== 0)
            writer.tag(2, WireType.Varint).int32(message.limit);
        /* int32 offset = 3; */
        if (message.offset !== 0)
            writer.tag(3, WireType.Varint).int32(message.offset);
        /* optional string item_def_id = 4; */
        if (message.itemDefId !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.itemDefId);
        /* optional string collection = 5; */
        if (message.collection !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.collection);
        /* optional string name = 6; */
        if (message.name !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.name);
        /* optional common.v1.Rarity rarity = 7; */
        if (message.rarity !== undefined)
            writer.tag(7, WireType.Varint).int32(message.rarity);
        /* optional string type = 8; */
        if (message.type !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.type);
        /* optional string display_type = 9; */
        if (message.displayType !== undefined)
            writer.tag(9, WireType.LengthDelimited).string(message.displayType);
        /* optional bool hidden = 10; */
        if (message.hidden !== undefined)
            writer.tag(10, WireType.Varint).bool(message.hidden);
        /* optional bool gameOnly = 11; */
        if (message.gameOnly !== undefined)
            writer.tag(11, WireType.Varint).bool(message.gameOnly);
        /* optional bool store_hidden = 12; */
        if (message.storeHidden !== undefined)
            writer.tag(12, WireType.Varint).bool(message.storeHidden);
        /* optional bool tradable = 13; */
        if (message.tradable !== undefined)
            writer.tag(13, WireType.Varint).bool(message.tradable);
        /* repeated string sort_fields = 14; */
        for (let i = 0; i < message.sortFields.length; i++)
            writer.tag(14, WireType.LengthDelimited).string(message.sortFields[i]);
        /* repeated string directions = 15; */
        for (let i = 0; i < message.directions.length; i++)
            writer.tag(15, WireType.LengthDelimited).string(message.directions[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message inventory.v1.ListItemsRequest
 */
export const ListItemsRequest = new ListItemsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListItemsByItemDefRequest$Type extends MessageType<ListItemsByItemDefRequest> {
    constructor() {
        super("inventory.v1.ListItemsByItemDefRequest", [
            { no: 1, name: "item_def_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "offset", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "sort_fields", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "directions", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListItemsByItemDefRequest>): ListItemsByItemDefRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.itemDefId = "";
        message.limit = 0;
        message.offset = 0;
        message.sortFields = [];
        message.directions = [];
        if (value !== undefined)
            reflectionMergePartial<ListItemsByItemDefRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListItemsByItemDefRequest): ListItemsByItemDefRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string item_def_id */ 1:
                    message.itemDefId = reader.string();
                    break;
                case /* int32 limit */ 2:
                    message.limit = reader.int32();
                    break;
                case /* int32 offset */ 3:
                    message.offset = reader.int32();
                    break;
                case /* repeated string sort_fields */ 4:
                    message.sortFields.push(reader.string());
                    break;
                case /* repeated string directions */ 5:
                    message.directions.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListItemsByItemDefRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string item_def_id = 1; */
        if (message.itemDefId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.itemDefId);
        /* int32 limit = 2; */
        if (message.limit !== 0)
            writer.tag(2, WireType.Varint).int32(message.limit);
        /* int32 offset = 3; */
        if (message.offset !== 0)
            writer.tag(3, WireType.Varint).int32(message.offset);
        /* repeated string sort_fields = 4; */
        for (let i = 0; i < message.sortFields.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.sortFields[i]);
        /* repeated string directions = 5; */
        for (let i = 0; i < message.directions.length; i++)
            writer.tag(5, WireType.LengthDelimited).string(message.directions[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message inventory.v1.ListItemsByItemDefRequest
 */
export const ListItemsByItemDefRequest = new ListItemsByItemDefRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListItemsResponse$Type extends MessageType<ListItemsResponse> {
    constructor() {
        super("inventory.v1.ListItemsResponse", [
            { no: 1, name: "items", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Item },
            { no: 2, name: "pagination", kind: "message", T: () => Pagination }
        ]);
    }
    create(value?: PartialMessage<ListItemsResponse>): ListItemsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.items = [];
        if (value !== undefined)
            reflectionMergePartial<ListItemsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListItemsResponse): ListItemsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated inventory.v1.Item items */ 1:
                    message.items.push(Item.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* common.v1.Pagination pagination */ 2:
                    message.pagination = Pagination.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListItemsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated inventory.v1.Item items = 1; */
        for (let i = 0; i < message.items.length; i++)
            Item.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* common.v1.Pagination pagination = 2; */
        if (message.pagination)
            Pagination.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message inventory.v1.ListItemsResponse
 */
export const ListItemsResponse = new ListItemsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConsumeItemRequest$Type extends MessageType<ConsumeItemRequest> {
    constructor() {
        super("inventory.v1.ConsumeItemRequest", [
            { no: 1, name: "item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "quantity", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ConsumeItemRequest>): ConsumeItemRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.itemId = "";
        message.quantity = 0;
        if (value !== undefined)
            reflectionMergePartial<ConsumeItemRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConsumeItemRequest): ConsumeItemRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string item_id */ 1:
                    message.itemId = reader.string();
                    break;
                case /* int32 quantity */ 2:
                    message.quantity = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConsumeItemRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string item_id = 1; */
        if (message.itemId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.itemId);
        /* int32 quantity = 2; */
        if (message.quantity !== 0)
            writer.tag(2, WireType.Varint).int32(message.quantity);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message inventory.v1.ConsumeItemRequest
 */
export const ConsumeItemRequest = new ConsumeItemRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConsumeItemResponse$Type extends MessageType<ConsumeItemResponse> {
    constructor() {
        super("inventory.v1.ConsumeItemResponse", [
            { no: 1, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ConsumeItemResponse>): ConsumeItemResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = "";
        if (value !== undefined)
            reflectionMergePartial<ConsumeItemResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConsumeItemResponse): ConsumeItemResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string status */ 1:
                    message.status = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConsumeItemResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string status = 1; */
        if (message.status !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message inventory.v1.ConsumeItemResponse
 */
export const ConsumeItemResponse = new ConsumeItemResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnpackRequest$Type extends MessageType<UnpackRequest> {
    constructor() {
        super("inventory.v1.UnpackRequest", [
            { no: 1, name: "item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "account_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "app_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "tags", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UnpackRequest>): UnpackRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.itemId = "";
        message.accountId = 0n;
        message.appId = 0n;
        message.tags = "";
        if (value !== undefined)
            reflectionMergePartial<UnpackRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnpackRequest): UnpackRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string item_id */ 1:
                    message.itemId = reader.string();
                    break;
                case /* int64 account_id */ 2:
                    message.accountId = reader.int64().toBigInt();
                    break;
                case /* int64 app_id */ 3:
                    message.appId = reader.int64().toBigInt();
                    break;
                case /* string tags */ 4:
                    message.tags = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnpackRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string item_id = 1; */
        if (message.itemId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.itemId);
        /* int64 account_id = 2; */
        if (message.accountId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.accountId);
        /* int64 app_id = 3; */
        if (message.appId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.appId);
        /* string tags = 4; */
        if (message.tags !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.tags);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message inventory.v1.UnpackRequest
 */
export const UnpackRequest = new UnpackRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnpackResponse$Type extends MessageType<UnpackResponse> {
    constructor() {
        super("inventory.v1.UnpackResponse", [
            { no: 1, name: "item_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UnpackResponse>): UnpackResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.itemIds = [];
        if (value !== undefined)
            reflectionMergePartial<UnpackResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnpackResponse): UnpackResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string item_ids */ 1:
                    message.itemIds.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnpackResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string item_ids = 1; */
        for (let i = 0; i < message.itemIds.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.itemIds[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message inventory.v1.UnpackResponse
 */
export const UnpackResponse = new UnpackResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GenerateRequest$Type extends MessageType<GenerateRequest> {
    constructor() {
        super("inventory.v1.GenerateRequest", [
            { no: 1, name: "item_def_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "account_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "app_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "tags", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "hold_till", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "item_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "source_item_def_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "rarity", kind: "enum", opt: true, T: () => ["common.v1.Rarity", Rarity] },
            { no: 9, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "description", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "icon_url", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "app_files", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "app_meta", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GenerateRequest>): GenerateRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.itemDefId = "";
        message.accountId = 0n;
        message.appId = 0n;
        message.tags = "";
        message.holdTill = 0n;
        if (value !== undefined)
            reflectionMergePartial<GenerateRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GenerateRequest): GenerateRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string item_def_id */ 1:
                    message.itemDefId = reader.string();
                    break;
                case /* int64 account_id */ 2:
                    message.accountId = reader.int64().toBigInt();
                    break;
                case /* int64 app_id */ 3:
                    message.appId = reader.int64().toBigInt();
                    break;
                case /* string tags */ 4:
                    message.tags = reader.string();
                    break;
                case /* int64 hold_till */ 5:
                    message.holdTill = reader.int64().toBigInt();
                    break;
                case /* optional string item_id */ 6:
                    message.itemId = reader.string();
                    break;
                case /* optional string source_item_def_id */ 7:
                    message.sourceItemDefId = reader.string();
                    break;
                case /* optional common.v1.Rarity rarity */ 8:
                    message.rarity = reader.int32();
                    break;
                case /* optional string name */ 9:
                    message.name = reader.string();
                    break;
                case /* optional string description */ 10:
                    message.description = reader.string();
                    break;
                case /* optional string icon_url */ 11:
                    message.iconUrl = reader.string();
                    break;
                case /* optional string app_files */ 12:
                    message.appFiles = reader.string();
                    break;
                case /* optional string app_meta */ 13:
                    message.appMeta = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GenerateRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string item_def_id = 1; */
        if (message.itemDefId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.itemDefId);
        /* int64 account_id = 2; */
        if (message.accountId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.accountId);
        /* int64 app_id = 3; */
        if (message.appId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.appId);
        /* string tags = 4; */
        if (message.tags !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.tags);
        /* int64 hold_till = 5; */
        if (message.holdTill !== 0n)
            writer.tag(5, WireType.Varint).int64(message.holdTill);
        /* optional string item_id = 6; */
        if (message.itemId !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.itemId);
        /* optional string source_item_def_id = 7; */
        if (message.sourceItemDefId !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.sourceItemDefId);
        /* optional common.v1.Rarity rarity = 8; */
        if (message.rarity !== undefined)
            writer.tag(8, WireType.Varint).int32(message.rarity);
        /* optional string name = 9; */
        if (message.name !== undefined)
            writer.tag(9, WireType.LengthDelimited).string(message.name);
        /* optional string description = 10; */
        if (message.description !== undefined)
            writer.tag(10, WireType.LengthDelimited).string(message.description);
        /* optional string icon_url = 11; */
        if (message.iconUrl !== undefined)
            writer.tag(11, WireType.LengthDelimited).string(message.iconUrl);
        /* optional string app_files = 12; */
        if (message.appFiles !== undefined)
            writer.tag(12, WireType.LengthDelimited).string(message.appFiles);
        /* optional string app_meta = 13; */
        if (message.appMeta !== undefined)
            writer.tag(13, WireType.LengthDelimited).string(message.appMeta);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message inventory.v1.GenerateRequest
 */
export const GenerateRequest = new GenerateRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GenerateResponse$Type extends MessageType<GenerateResponse> {
    constructor() {
        super("inventory.v1.GenerateResponse", [
            { no: 1, name: "item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GenerateResponse>): GenerateResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.itemId = "";
        if (value !== undefined)
            reflectionMergePartial<GenerateResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GenerateResponse): GenerateResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string item_id */ 1:
                    message.itemId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GenerateResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string item_id = 1; */
        if (message.itemId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.itemId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message inventory.v1.GenerateResponse
 */
export const GenerateResponse = new GenerateResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateItemRequest$Type extends MessageType<UpdateItemRequest> {
    constructor() {
        super("inventory.v1.UpdateItemRequest", [
            { no: 1, name: "item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "tags", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "app_meta", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "rarity", kind: "enum", T: () => ["common.v1.Rarity", Rarity] },
            { no: 5, name: "hold_till", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateItemRequest>): UpdateItemRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.itemId = "";
        message.rarity = 0;
        if (value !== undefined)
            reflectionMergePartial<UpdateItemRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateItemRequest): UpdateItemRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string item_id */ 1:
                    message.itemId = reader.string();
                    break;
                case /* optional string tags */ 2:
                    message.tags = reader.string();
                    break;
                case /* optional string app_meta */ 3:
                    message.appMeta = reader.string();
                    break;
                case /* common.v1.Rarity rarity */ 4:
                    message.rarity = reader.int32();
                    break;
                case /* optional int64 hold_till */ 5:
                    message.holdTill = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateItemRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string item_id = 1; */
        if (message.itemId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.itemId);
        /* optional string tags = 2; */
        if (message.tags !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.tags);
        /* optional string app_meta = 3; */
        if (message.appMeta !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.appMeta);
        /* common.v1.Rarity rarity = 4; */
        if (message.rarity !== 0)
            writer.tag(4, WireType.Varint).int32(message.rarity);
        /* optional int64 hold_till = 5; */
        if (message.holdTill !== undefined)
            writer.tag(5, WireType.Varint).int64(message.holdTill);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message inventory.v1.UpdateItemRequest
 */
export const UpdateItemRequest = new UpdateItemRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateItemResponse$Type extends MessageType<UpdateItemResponse> {
    constructor() {
        super("inventory.v1.UpdateItemResponse", [
            { no: 1, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateItemResponse>): UpdateItemResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = "";
        if (value !== undefined)
            reflectionMergePartial<UpdateItemResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateItemResponse): UpdateItemResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string status */ 1:
                    message.status = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateItemResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string status = 1; */
        if (message.status !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message inventory.v1.UpdateItemResponse
 */
export const UpdateItemResponse = new UpdateItemResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransferItemRequest$Type extends MessageType<TransferItemRequest> {
    constructor() {
        super("inventory.v1.TransferItemRequest", [
            { no: 1, name: "item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "account_to", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "comment", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TransferItemRequest>): TransferItemRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.itemId = "";
        message.accountTo = 0n;
        message.comment = "";
        if (value !== undefined)
            reflectionMergePartial<TransferItemRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TransferItemRequest): TransferItemRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string item_id */ 1:
                    message.itemId = reader.string();
                    break;
                case /* int64 account_to */ 2:
                    message.accountTo = reader.int64().toBigInt();
                    break;
                case /* string comment */ 3:
                    message.comment = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TransferItemRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string item_id = 1; */
        if (message.itemId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.itemId);
        /* int64 account_to = 2; */
        if (message.accountTo !== 0n)
            writer.tag(2, WireType.Varint).int64(message.accountTo);
        /* string comment = 3; */
        if (message.comment !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.comment);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message inventory.v1.TransferItemRequest
 */
export const TransferItemRequest = new TransferItemRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransferItemResponse$Type extends MessageType<TransferItemResponse> {
    constructor() {
        super("inventory.v1.TransferItemResponse", [
            { no: 1, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TransferItemResponse>): TransferItemResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = "";
        if (value !== undefined)
            reflectionMergePartial<TransferItemResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TransferItemResponse): TransferItemResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string status */ 1:
                    message.status = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TransferItemResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string status = 1; */
        if (message.status !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message inventory.v1.TransferItemResponse
 */
export const TransferItemResponse = new TransferItemResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamItemTransfersRequest$Type extends MessageType<StreamItemTransfersRequest> {
    constructor() {
        super("inventory.v1.StreamItemTransfersRequest", [
            { no: 1, name: "consumer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "limit", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "ack_by_request", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<StreamItemTransfersRequest>): StreamItemTransfersRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.consumer = "";
        message.limit = 0n;
        message.ackByRequest = false;
        if (value !== undefined)
            reflectionMergePartial<StreamItemTransfersRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamItemTransfersRequest): StreamItemTransfersRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string consumer */ 1:
                    message.consumer = reader.string();
                    break;
                case /* int64 limit */ 2:
                    message.limit = reader.int64().toBigInt();
                    break;
                case /* bool ack_by_request */ 3:
                    message.ackByRequest = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamItemTransfersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string consumer = 1; */
        if (message.consumer !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.consumer);
        /* int64 limit = 2; */
        if (message.limit !== 0n)
            writer.tag(2, WireType.Varint).int64(message.limit);
        /* bool ack_by_request = 3; */
        if (message.ackByRequest !== false)
            writer.tag(3, WireType.Varint).bool(message.ackByRequest);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message inventory.v1.StreamItemTransfersRequest
 */
export const StreamItemTransfersRequest = new StreamItemTransfersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamItemTransfersResponse$Type extends MessageType<StreamItemTransfersResponse> {
    constructor() {
        super("inventory.v1.StreamItemTransfersResponse", [
            { no: 1, name: "item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "account_from", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "account_to", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "tags", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "display_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "item_def_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "default_tags", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StreamItemTransfersResponse>): StreamItemTransfersResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.itemId = "";
        message.accountFrom = 0n;
        message.accountTo = 0n;
        message.timestamp = 0n;
        message.tags = "";
        message.displayType = "";
        message.itemDefId = "";
        message.defaultTags = "";
        message.messageId = "";
        if (value !== undefined)
            reflectionMergePartial<StreamItemTransfersResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamItemTransfersResponse): StreamItemTransfersResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string item_id */ 1:
                    message.itemId = reader.string();
                    break;
                case /* int64 account_from */ 2:
                    message.accountFrom = reader.int64().toBigInt();
                    break;
                case /* int64 account_to */ 3:
                    message.accountTo = reader.int64().toBigInt();
                    break;
                case /* int64 timestamp */ 4:
                    message.timestamp = reader.int64().toBigInt();
                    break;
                case /* string tags */ 5:
                    message.tags = reader.string();
                    break;
                case /* string display_type */ 6:
                    message.displayType = reader.string();
                    break;
                case /* string item_def_id */ 7:
                    message.itemDefId = reader.string();
                    break;
                case /* string default_tags */ 8:
                    message.defaultTags = reader.string();
                    break;
                case /* string message_id */ 9:
                    message.messageId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamItemTransfersResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string item_id = 1; */
        if (message.itemId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.itemId);
        /* int64 account_from = 2; */
        if (message.accountFrom !== 0n)
            writer.tag(2, WireType.Varint).int64(message.accountFrom);
        /* int64 account_to = 3; */
        if (message.accountTo !== 0n)
            writer.tag(3, WireType.Varint).int64(message.accountTo);
        /* int64 timestamp = 4; */
        if (message.timestamp !== 0n)
            writer.tag(4, WireType.Varint).int64(message.timestamp);
        /* string tags = 5; */
        if (message.tags !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.tags);
        /* string display_type = 6; */
        if (message.displayType !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.displayType);
        /* string item_def_id = 7; */
        if (message.itemDefId !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.itemDefId);
        /* string default_tags = 8; */
        if (message.defaultTags !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.defaultTags);
        /* string message_id = 9; */
        if (message.messageId !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.messageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message inventory.v1.StreamItemTransfersResponse
 */
export const StreamItemTransfersResponse = new StreamItemTransfersResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamItemRequest$Type extends MessageType<StreamItemRequest> {
    constructor() {
        super("inventory.v1.StreamItemRequest", [
            { no: 1, name: "consumer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "limit", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "ack_by_request", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<StreamItemRequest>): StreamItemRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.consumer = "";
        message.limit = 0n;
        message.ackByRequest = false;
        if (value !== undefined)
            reflectionMergePartial<StreamItemRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamItemRequest): StreamItemRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string consumer */ 1:
                    message.consumer = reader.string();
                    break;
                case /* int64 limit */ 2:
                    message.limit = reader.int64().toBigInt();
                    break;
                case /* bool ack_by_request */ 3:
                    message.ackByRequest = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamItemRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string consumer = 1; */
        if (message.consumer !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.consumer);
        /* int64 limit = 2; */
        if (message.limit !== 0n)
            writer.tag(2, WireType.Varint).int64(message.limit);
        /* bool ack_by_request = 3; */
        if (message.ackByRequest !== false)
            writer.tag(3, WireType.Varint).bool(message.ackByRequest);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message inventory.v1.StreamItemRequest
 */
export const StreamItemRequest = new StreamItemRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamItemResponse$Type extends MessageType<StreamItemResponse> {
    constructor() {
        super("inventory.v1.StreamItemResponse", [
            { no: 1, name: "item", kind: "message", T: () => Item },
            { no: 2, name: "type", kind: "enum", T: () => ["inventory.v1.StreamItemOpType", StreamItemOpType, "STREAM_ITEM_OP_TYPE_"] },
            { no: 3, name: "message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StreamItemResponse>): StreamItemResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = 0;
        message.messageId = "";
        if (value !== undefined)
            reflectionMergePartial<StreamItemResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamItemResponse): StreamItemResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* inventory.v1.Item item */ 1:
                    message.item = Item.internalBinaryRead(reader, reader.uint32(), options, message.item);
                    break;
                case /* inventory.v1.StreamItemOpType type */ 2:
                    message.type = reader.int32();
                    break;
                case /* string message_id */ 3:
                    message.messageId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamItemResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* inventory.v1.Item item = 1; */
        if (message.item)
            Item.internalBinaryWrite(message.item, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* inventory.v1.StreamItemOpType type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* string message_id = 3; */
        if (message.messageId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.messageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message inventory.v1.StreamItemResponse
 */
export const StreamItemResponse = new StreamItemResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddGroupRequest$Type extends MessageType<AddGroupRequest> {
    constructor() {
        super("inventory.v1.AddGroupRequest", [
            { no: 1, name: "type", kind: "enum", T: () => ["inventory.v1.StreamType", StreamType, "STREAM_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<AddGroupRequest>): AddGroupRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = 0;
        if (value !== undefined)
            reflectionMergePartial<AddGroupRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddGroupRequest): AddGroupRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* inventory.v1.StreamType type */ 1:
                    message.type = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddGroupRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* inventory.v1.StreamType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message inventory.v1.AddGroupRequest
 */
export const AddGroupRequest = new AddGroupRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddGroupResponse$Type extends MessageType<AddGroupResponse> {
    constructor() {
        super("inventory.v1.AddGroupResponse", [
            { no: 1, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AddGroupResponse>): AddGroupResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = "";
        if (value !== undefined)
            reflectionMergePartial<AddGroupResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddGroupResponse): AddGroupResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string status */ 1:
                    message.status = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddGroupResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string status = 1; */
        if (message.status !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message inventory.v1.AddGroupResponse
 */
export const AddGroupResponse = new AddGroupResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamItemTransfersAckRequest$Type extends MessageType<StreamItemTransfersAckRequest> {
    constructor() {
        super("inventory.v1.StreamItemTransfersAckRequest", [
            { no: 1, name: "messages", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StreamItemTransfersAckRequest>): StreamItemTransfersAckRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.messages = [];
        if (value !== undefined)
            reflectionMergePartial<StreamItemTransfersAckRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamItemTransfersAckRequest): StreamItemTransfersAckRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string messages */ 1:
                    message.messages.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamItemTransfersAckRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string messages = 1; */
        for (let i = 0; i < message.messages.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.messages[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message inventory.v1.StreamItemTransfersAckRequest
 */
export const StreamItemTransfersAckRequest = new StreamItemTransfersAckRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamItemTransfersAckResponse$Type extends MessageType<StreamItemTransfersAckResponse> {
    constructor() {
        super("inventory.v1.StreamItemTransfersAckResponse", [
            { no: 1, name: "status", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<StreamItemTransfersAckResponse>): StreamItemTransfersAckResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = false;
        if (value !== undefined)
            reflectionMergePartial<StreamItemTransfersAckResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamItemTransfersAckResponse): StreamItemTransfersAckResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool status */ 1:
                    message.status = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamItemTransfersAckResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool status = 1; */
        if (message.status !== false)
            writer.tag(1, WireType.Varint).bool(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message inventory.v1.StreamItemTransfersAckResponse
 */
export const StreamItemTransfersAckResponse = new StreamItemTransfersAckResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AckStreamMessagesRequest$Type extends MessageType<AckStreamMessagesRequest> {
    constructor() {
        super("inventory.v1.AckStreamMessagesRequest", [
            { no: 1, name: "messages", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "type", kind: "enum", T: () => ["inventory.v1.StreamType", StreamType, "STREAM_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<AckStreamMessagesRequest>): AckStreamMessagesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.messages = [];
        message.type = 0;
        if (value !== undefined)
            reflectionMergePartial<AckStreamMessagesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AckStreamMessagesRequest): AckStreamMessagesRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string messages */ 1:
                    message.messages.push(reader.string());
                    break;
                case /* inventory.v1.StreamType type */ 2:
                    message.type = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AckStreamMessagesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string messages = 1; */
        for (let i = 0; i < message.messages.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.messages[i]);
        /* inventory.v1.StreamType type = 2; */
        if (message.type !== 0)
            writer.tag(2, WireType.Varint).int32(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message inventory.v1.AckStreamMessagesRequest
 */
export const AckStreamMessagesRequest = new AckStreamMessagesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AckStreamMessagesResponse$Type extends MessageType<AckStreamMessagesResponse> {
    constructor() {
        super("inventory.v1.AckStreamMessagesResponse", [
            { no: 1, name: "status", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<AckStreamMessagesResponse>): AckStreamMessagesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = false;
        if (value !== undefined)
            reflectionMergePartial<AckStreamMessagesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AckStreamMessagesResponse): AckStreamMessagesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool status */ 1:
                    message.status = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AckStreamMessagesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool status = 1; */
        if (message.status !== false)
            writer.tag(1, WireType.Varint).bool(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message inventory.v1.AckStreamMessagesResponse
 */
export const AckStreamMessagesResponse = new AckStreamMessagesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransferLogRequest$Type extends MessageType<TransferLogRequest> {
    constructor() {
        super("inventory.v1.TransferLogRequest", [
            { no: 1, name: "item_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "offset", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TransferLogRequest>): TransferLogRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.itemId = "";
        message.limit = 0;
        message.offset = 0;
        if (value !== undefined)
            reflectionMergePartial<TransferLogRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TransferLogRequest): TransferLogRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string item_id */ 1:
                    message.itemId = reader.string();
                    break;
                case /* int32 limit */ 2:
                    message.limit = reader.int32();
                    break;
                case /* int32 offset */ 3:
                    message.offset = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TransferLogRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string item_id = 1; */
        if (message.itemId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.itemId);
        /* int32 limit = 2; */
        if (message.limit !== 0)
            writer.tag(2, WireType.Varint).int32(message.limit);
        /* int32 offset = 3; */
        if (message.offset !== 0)
            writer.tag(3, WireType.Varint).int32(message.offset);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message inventory.v1.TransferLogRequest
 */
export const TransferLogRequest = new TransferLogRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransferLogResponse$Type extends MessageType<TransferLogResponse> {
    constructor() {
        super("inventory.v1.TransferLogResponse", [
            { no: 1, name: "transfers", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TransferLogResponse_Transfer },
            { no: 2, name: "pagination", kind: "message", T: () => Pagination }
        ]);
    }
    create(value?: PartialMessage<TransferLogResponse>): TransferLogResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.transfers = [];
        if (value !== undefined)
            reflectionMergePartial<TransferLogResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TransferLogResponse): TransferLogResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated inventory.v1.TransferLogResponse.Transfer transfers */ 1:
                    message.transfers.push(TransferLogResponse_Transfer.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* common.v1.Pagination pagination */ 2:
                    message.pagination = Pagination.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TransferLogResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated inventory.v1.TransferLogResponse.Transfer transfers = 1; */
        for (let i = 0; i < message.transfers.length; i++)
            TransferLogResponse_Transfer.internalBinaryWrite(message.transfers[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* common.v1.Pagination pagination = 2; */
        if (message.pagination)
            Pagination.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message inventory.v1.TransferLogResponse
 */
export const TransferLogResponse = new TransferLogResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TransferLogResponse_Transfer$Type extends MessageType<TransferLogResponse_Transfer> {
    constructor() {
        super("inventory.v1.TransferLogResponse.Transfer", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "account_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "account_username", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "account_avatar", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "account_firstname", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "account_lastname", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TransferLogResponse_Transfer>): TransferLogResponse_Transfer {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.createdAt = "";
        message.accountId = 0n;
        if (value !== undefined)
            reflectionMergePartial<TransferLogResponse_Transfer>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TransferLogResponse_Transfer): TransferLogResponse_Transfer {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string created_at */ 2:
                    message.createdAt = reader.string();
                    break;
                case /* int64 account_id */ 3:
                    message.accountId = reader.int64().toBigInt();
                    break;
                case /* optional string account_username */ 4:
                    message.accountUsername = reader.string();
                    break;
                case /* optional string account_avatar */ 5:
                    message.accountAvatar = reader.string();
                    break;
                case /* optional string account_firstname */ 6:
                    message.accountFirstname = reader.string();
                    break;
                case /* optional string account_lastname */ 7:
                    message.accountLastname = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TransferLogResponse_Transfer, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string created_at = 2; */
        if (message.createdAt !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.createdAt);
        /* int64 account_id = 3; */
        if (message.accountId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.accountId);
        /* optional string account_username = 4; */
        if (message.accountUsername !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.accountUsername);
        /* optional string account_avatar = 5; */
        if (message.accountAvatar !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.accountAvatar);
        /* optional string account_firstname = 6; */
        if (message.accountFirstname !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.accountFirstname);
        /* optional string account_lastname = 7; */
        if (message.accountLastname !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.accountLastname);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message inventory.v1.TransferLogResponse.Transfer
 */
export const TransferLogResponse_Transfer = new TransferLogResponse_Transfer$Type();
/**
 * @generated ServiceType for protobuf service inventory.v1.InventoryService
 */
export const InventoryService = new ServiceType("inventory.v1.InventoryService", [
    { name: "ListItems", options: {}, I: ListItemsRequest, O: ListItemsResponse },
    { name: "GetItem", options: {}, I: GetItemRequest, O: Item },
    { name: "ConsumeItem", options: {}, I: ConsumeItemRequest, O: ConsumeItemResponse },
    { name: "Unpack", options: {}, I: UnpackRequest, O: UnpackResponse },
    { name: "Generate", options: {}, I: GenerateRequest, O: GenerateResponse },
    { name: "UpdateItem", options: {}, I: UpdateItemRequest, O: UpdateItemResponse },
    { name: "TransferItem", options: {}, I: TransferItemRequest, O: TransferItemResponse },
    { name: "StreamItemTransfer", serverStreaming: true, options: {}, I: StreamItemTransfersRequest, O: StreamItemTransfersResponse },
    { name: "StreamItem", serverStreaming: true, options: {}, I: StreamItemRequest, O: StreamItemResponse },
    { name: "AddGroup", options: {}, I: AddGroupRequest, O: AddGroupResponse },
    { name: "StreamAckMessages", options: {}, I: StreamItemTransfersAckRequest, O: StreamItemTransfersAckResponse },
    { name: "AckStreamMessages", options: {}, I: AckStreamMessagesRequest, O: AckStreamMessagesResponse },
    { name: "ListItemsByItemDef", options: {}, I: ListItemsByItemDefRequest, O: ListItemsResponse },
    { name: "TransferLog", options: {}, I: TransferLogRequest, O: TransferLogResponse }
]);
