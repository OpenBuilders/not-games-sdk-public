// @generated by protobuf-ts 2.11.1 with parameter add_pb_suffix
// @generated from protobuf file "auth/auth.proto" (package "auth.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message auth.v1.NewAuthRequest
 */
export interface NewAuthRequest {
    /**
     * @generated from protobuf field: int64 app_id = 1
     */
    appId: bigint;
    /**
     * @generated from protobuf field: string refresh_token = 2
     */
    refreshToken: string;
}
/**
 * @generated from protobuf message auth.v1.NewAuthResponse
 */
export interface NewAuthResponse {
    /**
     * @generated from protobuf field: string private_key = 1
     */
    privateKey: string;
    /**
     * @generated from protobuf field: string refresh_token = 2
     */
    refreshToken: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class NewAuthRequest$Type extends MessageType<NewAuthRequest> {
    constructor() {
        super("auth.v1.NewAuthRequest", [
            { no: 1, name: "app_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "refresh_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<NewAuthRequest>): NewAuthRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.appId = 0n;
        message.refreshToken = "";
        if (value !== undefined)
            reflectionMergePartial<NewAuthRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NewAuthRequest): NewAuthRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int64 app_id */ 1:
                    message.appId = reader.int64().toBigInt();
                    break;
                case /* string refresh_token */ 2:
                    message.refreshToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NewAuthRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int64 app_id = 1; */
        if (message.appId !== 0n)
            writer.tag(1, WireType.Varint).int64(message.appId);
        /* string refresh_token = 2; */
        if (message.refreshToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.refreshToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.v1.NewAuthRequest
 */
export const NewAuthRequest = new NewAuthRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NewAuthResponse$Type extends MessageType<NewAuthResponse> {
    constructor() {
        super("auth.v1.NewAuthResponse", [
            { no: 1, name: "private_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "refresh_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<NewAuthResponse>): NewAuthResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.privateKey = "";
        message.refreshToken = "";
        if (value !== undefined)
            reflectionMergePartial<NewAuthResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NewAuthResponse): NewAuthResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string private_key */ 1:
                    message.privateKey = reader.string();
                    break;
                case /* string refresh_token */ 2:
                    message.refreshToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NewAuthResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string private_key = 1; */
        if (message.privateKey !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.privateKey);
        /* string refresh_token = 2; */
        if (message.refreshToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.refreshToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message auth.v1.NewAuthResponse
 */
export const NewAuthResponse = new NewAuthResponse$Type();
/**
 * @generated ServiceType for protobuf service auth.v1.AuthService
 */
export const AuthService = new ServiceType("auth.v1.AuthService", [
    { name: "NewAuth", options: {}, I: NewAuthRequest, O: NewAuthResponse }
]);
