// @generated by protobuf-ts 2.11.1 with parameter add_pb_suffix
// @generated from protobuf file "squads/squads.proto" (package "squad.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message squad.v1.StreamEventsRequest
 */
export interface StreamEventsRequest {
    /**
     * @generated from protobuf field: string consumer = 1
     */
    consumer: string;
    /**
     * @generated from protobuf field: int64 limit = 2
     */
    limit: bigint;
    /**
     * @generated from protobuf field: bool ack_by_request = 3
     */
    ackByRequest: boolean;
}
/**
 * @generated from protobuf message squad.v1.StreamEventsResponse
 */
export interface StreamEventsResponse {
    /**
     * @generated from protobuf field: string type = 1
     */
    type: string;
    /**
     * @generated from protobuf field: int64 account_id = 2
     */
    accountId: bigint;
    /**
     * @generated from protobuf field: int64 squad_id = 3
     */
    squadId: bigint;
    /**
     * @generated from protobuf field: int64 timestamp = 4
     */
    timestamp: bigint;
    /**
     * @generated from protobuf field: string message_id = 5
     */
    messageId: string;
}
/**
 * @generated from protobuf message squad.v1.AddGroupRequest
 */
export interface AddGroupRequest {
}
/**
 * @generated from protobuf message squad.v1.AddGroupResponse
 */
export interface AddGroupResponse {
    /**
     * @generated from protobuf field: string status = 1
     */
    status: string;
}
/**
 * @generated from protobuf message squad.v1.StreamEventAckRequest
 */
export interface StreamEventAckRequest {
    /**
     * @generated from protobuf field: repeated string messages = 1
     */
    messages: string[];
}
/**
 * @generated from protobuf message squad.v1.StreamEventAckResponse
 */
export interface StreamEventAckResponse {
    /**
     * @generated from protobuf field: bool status = 1
     */
    status: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class StreamEventsRequest$Type extends MessageType<StreamEventsRequest> {
    constructor() {
        super("squad.v1.StreamEventsRequest", [
            { no: 1, name: "consumer", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "limit", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "ack_by_request", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<StreamEventsRequest>): StreamEventsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.consumer = "";
        message.limit = 0n;
        message.ackByRequest = false;
        if (value !== undefined)
            reflectionMergePartial<StreamEventsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamEventsRequest): StreamEventsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string consumer */ 1:
                    message.consumer = reader.string();
                    break;
                case /* int64 limit */ 2:
                    message.limit = reader.int64().toBigInt();
                    break;
                case /* bool ack_by_request */ 3:
                    message.ackByRequest = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamEventsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string consumer = 1; */
        if (message.consumer !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.consumer);
        /* int64 limit = 2; */
        if (message.limit !== 0n)
            writer.tag(2, WireType.Varint).int64(message.limit);
        /* bool ack_by_request = 3; */
        if (message.ackByRequest !== false)
            writer.tag(3, WireType.Varint).bool(message.ackByRequest);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message squad.v1.StreamEventsRequest
 */
export const StreamEventsRequest = new StreamEventsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamEventsResponse$Type extends MessageType<StreamEventsResponse> {
    constructor() {
        super("squad.v1.StreamEventsResponse", [
            { no: 1, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "account_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "squad_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "message_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StreamEventsResponse>): StreamEventsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = "";
        message.accountId = 0n;
        message.squadId = 0n;
        message.timestamp = 0n;
        message.messageId = "";
        if (value !== undefined)
            reflectionMergePartial<StreamEventsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamEventsResponse): StreamEventsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string type */ 1:
                    message.type = reader.string();
                    break;
                case /* int64 account_id */ 2:
                    message.accountId = reader.int64().toBigInt();
                    break;
                case /* int64 squad_id */ 3:
                    message.squadId = reader.int64().toBigInt();
                    break;
                case /* int64 timestamp */ 4:
                    message.timestamp = reader.int64().toBigInt();
                    break;
                case /* string message_id */ 5:
                    message.messageId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamEventsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string type = 1; */
        if (message.type !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* int64 account_id = 2; */
        if (message.accountId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.accountId);
        /* int64 squad_id = 3; */
        if (message.squadId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.squadId);
        /* int64 timestamp = 4; */
        if (message.timestamp !== 0n)
            writer.tag(4, WireType.Varint).int64(message.timestamp);
        /* string message_id = 5; */
        if (message.messageId !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.messageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message squad.v1.StreamEventsResponse
 */
export const StreamEventsResponse = new StreamEventsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddGroupRequest$Type extends MessageType<AddGroupRequest> {
    constructor() {
        super("squad.v1.AddGroupRequest", []);
    }
    create(value?: PartialMessage<AddGroupRequest>): AddGroupRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<AddGroupRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddGroupRequest): AddGroupRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddGroupRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message squad.v1.AddGroupRequest
 */
export const AddGroupRequest = new AddGroupRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddGroupResponse$Type extends MessageType<AddGroupResponse> {
    constructor() {
        super("squad.v1.AddGroupResponse", [
            { no: 1, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AddGroupResponse>): AddGroupResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = "";
        if (value !== undefined)
            reflectionMergePartial<AddGroupResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddGroupResponse): AddGroupResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string status */ 1:
                    message.status = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddGroupResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string status = 1; */
        if (message.status !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message squad.v1.AddGroupResponse
 */
export const AddGroupResponse = new AddGroupResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamEventAckRequest$Type extends MessageType<StreamEventAckRequest> {
    constructor() {
        super("squad.v1.StreamEventAckRequest", [
            { no: 1, name: "messages", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<StreamEventAckRequest>): StreamEventAckRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.messages = [];
        if (value !== undefined)
            reflectionMergePartial<StreamEventAckRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamEventAckRequest): StreamEventAckRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string messages */ 1:
                    message.messages.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamEventAckRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string messages = 1; */
        for (let i = 0; i < message.messages.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.messages[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message squad.v1.StreamEventAckRequest
 */
export const StreamEventAckRequest = new StreamEventAckRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StreamEventAckResponse$Type extends MessageType<StreamEventAckResponse> {
    constructor() {
        super("squad.v1.StreamEventAckResponse", [
            { no: 1, name: "status", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<StreamEventAckResponse>): StreamEventAckResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = false;
        if (value !== undefined)
            reflectionMergePartial<StreamEventAckResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StreamEventAckResponse): StreamEventAckResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool status */ 1:
                    message.status = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StreamEventAckResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool status = 1; */
        if (message.status !== false)
            writer.tag(1, WireType.Varint).bool(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message squad.v1.StreamEventAckResponse
 */
export const StreamEventAckResponse = new StreamEventAckResponse$Type();
/**
 * @generated ServiceType for protobuf service squad.v1.SquadsService
 */
export const SquadsService = new ServiceType("squad.v1.SquadsService", [
    { name: "StreamEvents", serverStreaming: true, options: {}, I: StreamEventsRequest, O: StreamEventsResponse },
    { name: "AddGroup", options: {}, I: AddGroupRequest, O: AddGroupResponse },
    { name: "StreamAckMessages", options: {}, I: StreamEventAckRequest, O: StreamEventAckResponse }
]);
