// @generated by protobuf-ts 2.11.1 with parameter add_pb_suffix
// @generated from protobuf file "squads/squads.proto" (package "squad.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { SquadsService } from "./squads_pb";
import type { StreamEventAckResponse } from "./squads_pb";
import type { StreamEventAckRequest } from "./squads_pb";
import type { AddGroupResponse } from "./squads_pb";
import type { AddGroupRequest } from "./squads_pb";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { StreamEventsResponse } from "./squads_pb";
import type { StreamEventsRequest } from "./squads_pb";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service squad.v1.SquadsService
 */
export interface ISquadsServiceClient {
    /**
     * @generated from protobuf rpc: StreamEvents
     */
    streamEvents(input: StreamEventsRequest, options?: RpcOptions): ServerStreamingCall<StreamEventsRequest, StreamEventsResponse>;
    /**
     * @generated from protobuf rpc: AddGroup
     */
    addGroup(input: AddGroupRequest, options?: RpcOptions): UnaryCall<AddGroupRequest, AddGroupResponse>;
    /**
     * @generated from protobuf rpc: StreamAckMessages
     */
    streamAckMessages(input: StreamEventAckRequest, options?: RpcOptions): UnaryCall<StreamEventAckRequest, StreamEventAckResponse>;
}
/**
 * @generated from protobuf service squad.v1.SquadsService
 */
export class SquadsServiceClient implements ISquadsServiceClient, ServiceInfo {
    typeName = SquadsService.typeName;
    methods = SquadsService.methods;
    options = SquadsService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: StreamEvents
     */
    streamEvents(input: StreamEventsRequest, options?: RpcOptions): ServerStreamingCall<StreamEventsRequest, StreamEventsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<StreamEventsRequest, StreamEventsResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: AddGroup
     */
    addGroup(input: AddGroupRequest, options?: RpcOptions): UnaryCall<AddGroupRequest, AddGroupResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<AddGroupRequest, AddGroupResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: StreamAckMessages
     */
    streamAckMessages(input: StreamEventAckRequest, options?: RpcOptions): UnaryCall<StreamEventAckRequest, StreamEventAckResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<StreamEventAckRequest, StreamEventAckResponse>("unary", this._transport, method, opt, input);
    }
}
