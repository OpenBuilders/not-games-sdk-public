// @generated by protobuf-ts 2.11.1 with parameter add_pb_suffix
// @generated from protobuf file "achievement/achievement.proto" (package "achievement.v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { AchievementService } from "./achievement_pb";
import type { CreateAchievementsResponse } from "./achievement_pb";
import type { CreateAchievementsRequest } from "./achievement_pb";
import type { Achievement } from "./achievement_pb";
import type { GetAchievementRequest } from "./achievement_pb";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ListAchievementsResponse } from "./achievement_pb";
import type { ListAchievementsRequest } from "./achievement_pb";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service achievement.v1.AchievementService
 */
export interface IAchievementServiceClient {
    /**
     * @generated from protobuf rpc: ListAchievements
     */
    listAchievements(input: ListAchievementsRequest, options?: RpcOptions): UnaryCall<ListAchievementsRequest, ListAchievementsResponse>;
    /**
     * @generated from protobuf rpc: GetAchievement
     */
    getAchievement(input: GetAchievementRequest, options?: RpcOptions): UnaryCall<GetAchievementRequest, Achievement>;
    /**
     * @generated from protobuf rpc: CreateAchievements
     */
    createAchievements(input: CreateAchievementsRequest, options?: RpcOptions): UnaryCall<CreateAchievementsRequest, CreateAchievementsResponse>;
}
/**
 * @generated from protobuf service achievement.v1.AchievementService
 */
export class AchievementServiceClient implements IAchievementServiceClient, ServiceInfo {
    typeName = AchievementService.typeName;
    methods = AchievementService.methods;
    options = AchievementService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: ListAchievements
     */
    listAchievements(input: ListAchievementsRequest, options?: RpcOptions): UnaryCall<ListAchievementsRequest, ListAchievementsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListAchievementsRequest, ListAchievementsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetAchievement
     */
    getAchievement(input: GetAchievementRequest, options?: RpcOptions): UnaryCall<GetAchievementRequest, Achievement> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetAchievementRequest, Achievement>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: CreateAchievements
     */
    createAchievements(input: CreateAchievementsRequest, options?: RpcOptions): UnaryCall<CreateAchievementsRequest, CreateAchievementsResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<CreateAchievementsRequest, CreateAchievementsResponse>("unary", this._transport, method, opt, input);
    }
}
