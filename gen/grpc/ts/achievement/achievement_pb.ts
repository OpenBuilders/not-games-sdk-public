// @generated by protobuf-ts 2.11.1 with parameter add_pb_suffix
// @generated from protobuf file "achievement/achievement.proto" (package "achievement.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Pagination } from "../common/pagination_pb";
/**
 * @generated from protobuf message achievement.v1.Achievement
 */
export interface Achievement {
    /**
     * @generated from protobuf field: string achievement_def_id = 1
     */
    achievementDefId: string;
    /**
     * @generated from protobuf field: string achievement_id = 2
     */
    achievementId: string;
    /**
     * @generated from protobuf field: int64 account_id = 3
     */
    accountId: bigint;
    /**
     * @generated from protobuf field: int64 app_id = 4
     */
    appId: bigint;
    /**
     * @generated from protobuf field: string name = 5
     */
    name: string;
    /**
     * @generated from protobuf field: string description = 6
     */
    description: string;
    /**
     * @generated from protobuf field: string icon_url = 7
     */
    iconUrl: string;
    /**
     * @generated from protobuf field: string tags = 8
     */
    tags: string;
    /**
     * @generated from protobuf field: bool hidden = 9
     */
    hidden: boolean;
    /**
     * @generated from protobuf field: string display_type = 10
     */
    displayType: string;
    /**
     * @generated from protobuf field: string created_at = 11
     */
    createdAt: string;
    /**
     * @generated from protobuf field: string updated_at = 12
     */
    updatedAt: string;
    /**
     * @generated from protobuf field: string default_tags = 13
     */
    defaultTags: string;
}
/**
 * @generated from protobuf message achievement.v1.ListAchievementsRequest
 */
export interface ListAchievementsRequest {
    /**
     * @generated from protobuf field: optional int64 app_id = 1
     */
    appId?: bigint;
    /**
     * @generated from protobuf field: int32 limit = 2
     */
    limit: number;
    /**
     * @generated from protobuf field: int32 offset = 3
     */
    offset: number;
}
/**
 * @generated from protobuf message achievement.v1.ListAchievementsResponse
 */
export interface ListAchievementsResponse {
    /**
     * @generated from protobuf field: repeated achievement.v1.Achievement achievements = 1
     */
    achievements: Achievement[];
    /**
     * @generated from protobuf field: common.v1.Pagination pagination = 2
     */
    pagination?: Pagination;
}
/**
 * @generated from protobuf message achievement.v1.GetAchievementRequest
 */
export interface GetAchievementRequest {
    /**
     * @generated from protobuf field: string achievement_id = 1
     */
    achievementId: string;
}
/**
 * @generated from protobuf message achievement.v1.CreateAchievementsRequest
 */
export interface CreateAchievementsRequest {
    /**
     * @generated from protobuf field: repeated string achievement_def_ids = 1
     */
    achievementDefIds: string[];
    /**
     * @generated from protobuf field: string tags = 2
     */
    tags: string;
}
/**
 * @generated from protobuf message achievement.v1.CreateAchievementsResponse
 */
export interface CreateAchievementsResponse {
    /**
     * @generated from protobuf field: repeated achievement.v1.Achievement achievements = 1
     */
    achievements: Achievement[];
}
// @generated message type with reflection information, may provide speed optimized methods
class Achievement$Type extends MessageType<Achievement> {
    constructor() {
        super("achievement.v1.Achievement", [
            { no: 1, name: "achievement_def_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "achievement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "account_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "app_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "icon_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "tags", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "hidden", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "display_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "created_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "updated_at", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "default_tags", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Achievement>): Achievement {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.achievementDefId = "";
        message.achievementId = "";
        message.accountId = 0n;
        message.appId = 0n;
        message.name = "";
        message.description = "";
        message.iconUrl = "";
        message.tags = "";
        message.hidden = false;
        message.displayType = "";
        message.createdAt = "";
        message.updatedAt = "";
        message.defaultTags = "";
        if (value !== undefined)
            reflectionMergePartial<Achievement>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Achievement): Achievement {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string achievement_def_id */ 1:
                    message.achievementDefId = reader.string();
                    break;
                case /* string achievement_id */ 2:
                    message.achievementId = reader.string();
                    break;
                case /* int64 account_id */ 3:
                    message.accountId = reader.int64().toBigInt();
                    break;
                case /* int64 app_id */ 4:
                    message.appId = reader.int64().toBigInt();
                    break;
                case /* string name */ 5:
                    message.name = reader.string();
                    break;
                case /* string description */ 6:
                    message.description = reader.string();
                    break;
                case /* string icon_url */ 7:
                    message.iconUrl = reader.string();
                    break;
                case /* string tags */ 8:
                    message.tags = reader.string();
                    break;
                case /* bool hidden */ 9:
                    message.hidden = reader.bool();
                    break;
                case /* string display_type */ 10:
                    message.displayType = reader.string();
                    break;
                case /* string created_at */ 11:
                    message.createdAt = reader.string();
                    break;
                case /* string updated_at */ 12:
                    message.updatedAt = reader.string();
                    break;
                case /* string default_tags */ 13:
                    message.defaultTags = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Achievement, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string achievement_def_id = 1; */
        if (message.achievementDefId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.achievementDefId);
        /* string achievement_id = 2; */
        if (message.achievementId !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.achievementId);
        /* int64 account_id = 3; */
        if (message.accountId !== 0n)
            writer.tag(3, WireType.Varint).int64(message.accountId);
        /* int64 app_id = 4; */
        if (message.appId !== 0n)
            writer.tag(4, WireType.Varint).int64(message.appId);
        /* string name = 5; */
        if (message.name !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.name);
        /* string description = 6; */
        if (message.description !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.description);
        /* string icon_url = 7; */
        if (message.iconUrl !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.iconUrl);
        /* string tags = 8; */
        if (message.tags !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.tags);
        /* bool hidden = 9; */
        if (message.hidden !== false)
            writer.tag(9, WireType.Varint).bool(message.hidden);
        /* string display_type = 10; */
        if (message.displayType !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.displayType);
        /* string created_at = 11; */
        if (message.createdAt !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.createdAt);
        /* string updated_at = 12; */
        if (message.updatedAt !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.updatedAt);
        /* string default_tags = 13; */
        if (message.defaultTags !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.defaultTags);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message achievement.v1.Achievement
 */
export const Achievement = new Achievement$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListAchievementsRequest$Type extends MessageType<ListAchievementsRequest> {
    constructor() {
        super("achievement.v1.ListAchievementsRequest", [
            { no: 1, name: "app_id", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "offset", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ListAchievementsRequest>): ListAchievementsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.limit = 0;
        message.offset = 0;
        if (value !== undefined)
            reflectionMergePartial<ListAchievementsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListAchievementsRequest): ListAchievementsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int64 app_id */ 1:
                    message.appId = reader.int64().toBigInt();
                    break;
                case /* int32 limit */ 2:
                    message.limit = reader.int32();
                    break;
                case /* int32 offset */ 3:
                    message.offset = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListAchievementsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int64 app_id = 1; */
        if (message.appId !== undefined)
            writer.tag(1, WireType.Varint).int64(message.appId);
        /* int32 limit = 2; */
        if (message.limit !== 0)
            writer.tag(2, WireType.Varint).int32(message.limit);
        /* int32 offset = 3; */
        if (message.offset !== 0)
            writer.tag(3, WireType.Varint).int32(message.offset);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message achievement.v1.ListAchievementsRequest
 */
export const ListAchievementsRequest = new ListAchievementsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListAchievementsResponse$Type extends MessageType<ListAchievementsResponse> {
    constructor() {
        super("achievement.v1.ListAchievementsResponse", [
            { no: 1, name: "achievements", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Achievement },
            { no: 2, name: "pagination", kind: "message", T: () => Pagination }
        ]);
    }
    create(value?: PartialMessage<ListAchievementsResponse>): ListAchievementsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.achievements = [];
        if (value !== undefined)
            reflectionMergePartial<ListAchievementsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListAchievementsResponse): ListAchievementsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated achievement.v1.Achievement achievements */ 1:
                    message.achievements.push(Achievement.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* common.v1.Pagination pagination */ 2:
                    message.pagination = Pagination.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListAchievementsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated achievement.v1.Achievement achievements = 1; */
        for (let i = 0; i < message.achievements.length; i++)
            Achievement.internalBinaryWrite(message.achievements[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* common.v1.Pagination pagination = 2; */
        if (message.pagination)
            Pagination.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message achievement.v1.ListAchievementsResponse
 */
export const ListAchievementsResponse = new ListAchievementsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAchievementRequest$Type extends MessageType<GetAchievementRequest> {
    constructor() {
        super("achievement.v1.GetAchievementRequest", [
            { no: 1, name: "achievement_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetAchievementRequest>): GetAchievementRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.achievementId = "";
        if (value !== undefined)
            reflectionMergePartial<GetAchievementRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAchievementRequest): GetAchievementRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string achievement_id */ 1:
                    message.achievementId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAchievementRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string achievement_id = 1; */
        if (message.achievementId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.achievementId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message achievement.v1.GetAchievementRequest
 */
export const GetAchievementRequest = new GetAchievementRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateAchievementsRequest$Type extends MessageType<CreateAchievementsRequest> {
    constructor() {
        super("achievement.v1.CreateAchievementsRequest", [
            { no: 1, name: "achievement_def_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "tags", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateAchievementsRequest>): CreateAchievementsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.achievementDefIds = [];
        message.tags = "";
        if (value !== undefined)
            reflectionMergePartial<CreateAchievementsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateAchievementsRequest): CreateAchievementsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated string achievement_def_ids */ 1:
                    message.achievementDefIds.push(reader.string());
                    break;
                case /* string tags */ 2:
                    message.tags = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateAchievementsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated string achievement_def_ids = 1; */
        for (let i = 0; i < message.achievementDefIds.length; i++)
            writer.tag(1, WireType.LengthDelimited).string(message.achievementDefIds[i]);
        /* string tags = 2; */
        if (message.tags !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.tags);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message achievement.v1.CreateAchievementsRequest
 */
export const CreateAchievementsRequest = new CreateAchievementsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateAchievementsResponse$Type extends MessageType<CreateAchievementsResponse> {
    constructor() {
        super("achievement.v1.CreateAchievementsResponse", [
            { no: 1, name: "achievements", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Achievement }
        ]);
    }
    create(value?: PartialMessage<CreateAchievementsResponse>): CreateAchievementsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.achievements = [];
        if (value !== undefined)
            reflectionMergePartial<CreateAchievementsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateAchievementsResponse): CreateAchievementsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated achievement.v1.Achievement achievements */ 1:
                    message.achievements.push(Achievement.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateAchievementsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated achievement.v1.Achievement achievements = 1; */
        for (let i = 0; i < message.achievements.length; i++)
            Achievement.internalBinaryWrite(message.achievements[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message achievement.v1.CreateAchievementsResponse
 */
export const CreateAchievementsResponse = new CreateAchievementsResponse$Type();
/**
 * @generated ServiceType for protobuf service achievement.v1.AchievementService
 */
export const AchievementService = new ServiceType("achievement.v1.AchievementService", [
    { name: "ListAchievements", options: {}, I: ListAchievementsRequest, O: ListAchievementsResponse },
    { name: "GetAchievement", options: {}, I: GetAchievementRequest, O: Achievement },
    { name: "CreateAchievements", options: {}, I: CreateAchievementsRequest, O: CreateAchievementsResponse }
]);
