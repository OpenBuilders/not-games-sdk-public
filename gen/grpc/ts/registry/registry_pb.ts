// @generated by protobuf-ts 2.11.1 with parameter add_pb_suffix
// @generated from protobuf file "registry/registry.proto" (package "registry.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Pagination } from "../common/pagination_pb";
import { Rarity } from "../common/rarity_pb";
/**
 * @generated from protobuf message registry.v1.ItemDef
 */
export interface ItemDef {
    /**
     * @generated from protobuf field: string item_def_id = 1
     */
    itemDefId: string;
    /**
     * @generated from protobuf field: int64 app_id = 2
     */
    appId: bigint;
    /**
     * @generated from protobuf field: string name = 3
     */
    name: string;
    /**
     * @generated from protobuf field: string description = 4
     */
    description: string;
    /**
     * @generated from protobuf field: string type = 5
     */
    type: string;
    /**
     * @generated from protobuf field: string display_type = 6
     */
    displayType: string;
    /**
     * @generated from protobuf field: string bundle = 7
     */
    bundle: string;
    /**
     * @generated from protobuf field: string price = 8
     */
    price: string;
    /**
     * @generated from protobuf field: string icon_url = 9
     */
    iconUrl: string;
    /**
     * @generated from protobuf field: bool marketable = 10
     */
    marketable: boolean;
    /**
     * @generated from protobuf field: string tags = 11
     */
    tags: string;
    /**
     * @generated from protobuf field: string store_tags = 12
     */
    storeTags: string;
    /**
     * @generated from protobuf field: string store_images = 13
     */
    storeImages: string;
    /**
     * @generated from protobuf field: string app_files = 14
     */
    appFiles: string;
    /**
     * @generated from protobuf field: string collection = 15
     */
    collection: string;
    /**
     * @generated from protobuf field: bool hidden = 16
     */
    hidden: boolean;
    /**
     * @generated from protobuf field: bool store_hidden = 17
     */
    storeHidden: boolean;
    /**
     * @generated from protobuf field: bool game_only = 18
     */
    gameOnly: boolean;
    /**
     * @generated from protobuf field: string promo = 19
     */
    promo: string;
    /**
     * @generated from protobuf field: bool tradable = 20
     */
    tradable: boolean;
    /**
     * @generated from protobuf field: common.v1.Rarity rarity = 21
     */
    rarity: Rarity;
    /**
     * @generated from protobuf field: string exchange = 22
     */
    exchange: string;
    /**
     * @generated from protobuf field: int64 supply = 23
     */
    supply: bigint;
    /**
     * @generated from protobuf field: optional int64 max_supply = 24
     */
    maxSupply?: bigint;
}
/**
 * @generated from protobuf message registry.v1.UpdateItemDefRequest
 */
export interface UpdateItemDefRequest {
    /**
     * @generated from protobuf field: string item_def_id = 1
     */
    itemDefId: string;
    /**
     * @generated from protobuf field: int64 app_id = 2
     */
    appId: bigint;
    /**
     * @generated from protobuf field: string name = 3
     */
    name: string;
    /**
     * @generated from protobuf field: string description = 4
     */
    description: string;
    /**
     * @generated from protobuf field: string display_type = 5
     */
    displayType: string;
    /**
     * @generated from protobuf field: string bundle = 6
     */
    bundle: string;
    /**
     * @generated from protobuf field: string price = 7
     */
    price: string;
    /**
     * @generated from protobuf field: string icon_url = 8
     */
    iconUrl: string;
    /**
     * @generated from protobuf field: bool marketable = 9
     */
    marketable: boolean;
    /**
     * @generated from protobuf field: string store_tags = 10
     */
    storeTags: string;
    /**
     * @generated from protobuf field: string store_images = 11
     */
    storeImages: string;
    /**
     * @generated from protobuf field: string app_files = 12
     */
    appFiles: string;
    /**
     * @generated from protobuf field: string collection = 13
     */
    collection: string;
    /**
     * @generated from protobuf field: bool hidden = 14
     */
    hidden: boolean;
    /**
     * @generated from protobuf field: bool store_hidden = 15
     */
    storeHidden: boolean;
    /**
     * @generated from protobuf field: bool game_only = 16
     */
    gameOnly: boolean;
    /**
     * @generated from protobuf field: string promo = 17
     */
    promo: string;
    /**
     * @generated from protobuf field: bool tradable = 18
     */
    tradable: boolean;
    /**
     * @generated from protobuf field: string exchange = 19
     */
    exchange: string;
    /**
     * @generated from protobuf field: optional int64 max_supply = 20
     */
    maxSupply?: bigint;
}
/**
 * @generated from protobuf message registry.v1.AchievementDef
 */
export interface AchievementDef {
    /**
     * @generated from protobuf field: string achievement_def_id = 1
     */
    achievementDefId: string;
    /**
     * @generated from protobuf field: int64 app_id = 2
     */
    appId: bigint;
    /**
     * @generated from protobuf field: string name = 3
     */
    name: string;
    /**
     * @generated from protobuf field: string description = 4
     */
    description: string;
    /**
     * @generated from protobuf field: string icon_url = 5
     */
    iconUrl: string;
    /**
     * @generated from protobuf field: string tags = 6
     */
    tags: string;
    /**
     * @generated from protobuf field: bool hidden = 7
     */
    hidden: boolean;
    /**
     * @generated from protobuf field: string display_type = 8
     */
    displayType: string;
}
/**
 * @generated from protobuf message registry.v1.GetItemDefRequest
 */
export interface GetItemDefRequest {
    /**
     * @generated from protobuf field: string item_def_id = 1
     */
    itemDefId: string;
}
/**
 * @generated from protobuf message registry.v1.CreateItemDefRequest
 */
export interface CreateItemDefRequest {
    /**
     * @generated from protobuf field: registry.v1.ItemDef item_def = 1
     */
    itemDef?: ItemDef;
}
/**
 * @generated from protobuf message registry.v1.CreateItemDefResponse
 */
export interface CreateItemDefResponse {
    /**
     * @generated from protobuf field: string status = 1
     */
    status: string;
}
/**
 * @generated from protobuf message registry.v1.UpdateItemDefResponse
 */
export interface UpdateItemDefResponse {
    /**
     * @generated from protobuf field: string status = 1
     */
    status: string;
}
/**
 * @generated from protobuf message registry.v1.GetAchievementDefRequest
 */
export interface GetAchievementDefRequest {
    /**
     * @generated from protobuf field: string achievement_def_id = 1
     */
    achievementDefId: string;
}
/**
 * @generated from protobuf message registry.v1.CreateAchievementDefRequest
 */
export interface CreateAchievementDefRequest {
    /**
     * @generated from protobuf field: registry.v1.AchievementDef achievement_def = 1
     */
    achievementDef?: AchievementDef;
}
/**
 * @generated from protobuf message registry.v1.CreateAchievementDefResponse
 */
export interface CreateAchievementDefResponse {
    /**
     * @generated from protobuf field: string status = 1
     */
    status: string;
}
/**
 * @generated from protobuf message registry.v1.UpdateAchievementDefRequest
 */
export interface UpdateAchievementDefRequest {
    /**
     * @generated from protobuf field: registry.v1.AchievementDef achievement_def = 1
     */
    achievementDef?: AchievementDef;
}
/**
 * @generated from protobuf message registry.v1.UpdateAchievementDefResponse
 */
export interface UpdateAchievementDefResponse {
    /**
     * @generated from protobuf field: string status = 1
     */
    status: string;
}
/**
 * @generated from protobuf message registry.v1.ListItemDefsRequest
 */
export interface ListItemDefsRequest {
    /**
     * @generated from protobuf field: int32 limit = 1
     */
    limit: number;
    /**
     * @generated from protobuf field: int32 offset = 2
     */
    offset: number;
    /**
     * @generated from protobuf field: optional string collection = 3
     */
    collection?: string;
    /**
     * @generated from protobuf field: optional string name = 4
     */
    name?: string;
    /**
     * @generated from protobuf field: optional common.v1.Rarity rarity = 5
     */
    rarity?: Rarity;
    /**
     * @generated from protobuf field: optional string type = 6
     */
    type?: string;
    /**
     * @generated from protobuf field: optional string display_type = 7
     */
    displayType?: string;
    /**
     * @generated from protobuf field: optional string hidden = 8
     */
    hidden?: string;
    /**
     * @generated from protobuf field: optional string game_only = 9
     */
    gameOnly?: string;
    /**
     * @generated from protobuf field: optional string store_hidden = 10
     */
    storeHidden?: string;
    /**
     * @generated from protobuf field: optional string tradable = 11
     */
    tradable?: string;
    /**
     * @generated from protobuf field: optional int64 supply = 12
     */
    supply?: bigint;
    /**
     * @generated from protobuf field: repeated string sort_fields = 13
     */
    sortFields: string[];
    /**
     * @generated from protobuf field: repeated string directions = 14
     */
    directions: string[];
}
/**
 * @generated from protobuf message registry.v1.ListItemDefsResponse
 */
export interface ListItemDefsResponse {
    /**
     * @generated from protobuf field: repeated registry.v1.ItemDef items = 1
     */
    items: ItemDef[];
    /**
     * @generated from protobuf field: common.v1.Pagination pagination = 2
     */
    pagination?: Pagination;
}
/**
 * @generated from protobuf message registry.v1.ListAchievementsRequest
 */
export interface ListAchievementsRequest {
    /**
     * @generated from protobuf field: int32 limit = 1
     */
    limit: number;
    /**
     * @generated from protobuf field: int32 offset = 2
     */
    offset: number;
}
/**
 * @generated from protobuf message registry.v1.ListAchievementsResponse
 */
export interface ListAchievementsResponse {
    /**
     * @generated from protobuf field: repeated registry.v1.AchievementDef items = 1
     */
    items: AchievementDef[];
    /**
     * @generated from protobuf field: common.v1.Pagination pagination = 2
     */
    pagination?: Pagination;
}
// @generated message type with reflection information, may provide speed optimized methods
class ItemDef$Type extends MessageType<ItemDef> {
    constructor() {
        super("registry.v1.ItemDef", [
            { no: 1, name: "item_def_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "app_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "display_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "bundle", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "price", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "icon_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "marketable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "tags", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "store_tags", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "store_images", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "app_files", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "collection", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 16, name: "hidden", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 17, name: "store_hidden", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 18, name: "game_only", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 19, name: "promo", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "tradable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 21, name: "rarity", kind: "enum", T: () => ["common.v1.Rarity", Rarity] },
            { no: 22, name: "exchange", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 23, name: "supply", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 24, name: "max_supply", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ItemDef>): ItemDef {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.itemDefId = "";
        message.appId = 0n;
        message.name = "";
        message.description = "";
        message.type = "";
        message.displayType = "";
        message.bundle = "";
        message.price = "";
        message.iconUrl = "";
        message.marketable = false;
        message.tags = "";
        message.storeTags = "";
        message.storeImages = "";
        message.appFiles = "";
        message.collection = "";
        message.hidden = false;
        message.storeHidden = false;
        message.gameOnly = false;
        message.promo = "";
        message.tradable = false;
        message.rarity = 0;
        message.exchange = "";
        message.supply = 0n;
        if (value !== undefined)
            reflectionMergePartial<ItemDef>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ItemDef): ItemDef {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string item_def_id */ 1:
                    message.itemDefId = reader.string();
                    break;
                case /* int64 app_id */ 2:
                    message.appId = reader.int64().toBigInt();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* string description */ 4:
                    message.description = reader.string();
                    break;
                case /* string type */ 5:
                    message.type = reader.string();
                    break;
                case /* string display_type */ 6:
                    message.displayType = reader.string();
                    break;
                case /* string bundle */ 7:
                    message.bundle = reader.string();
                    break;
                case /* string price */ 8:
                    message.price = reader.string();
                    break;
                case /* string icon_url */ 9:
                    message.iconUrl = reader.string();
                    break;
                case /* bool marketable */ 10:
                    message.marketable = reader.bool();
                    break;
                case /* string tags */ 11:
                    message.tags = reader.string();
                    break;
                case /* string store_tags */ 12:
                    message.storeTags = reader.string();
                    break;
                case /* string store_images */ 13:
                    message.storeImages = reader.string();
                    break;
                case /* string app_files */ 14:
                    message.appFiles = reader.string();
                    break;
                case /* string collection */ 15:
                    message.collection = reader.string();
                    break;
                case /* bool hidden */ 16:
                    message.hidden = reader.bool();
                    break;
                case /* bool store_hidden */ 17:
                    message.storeHidden = reader.bool();
                    break;
                case /* bool game_only */ 18:
                    message.gameOnly = reader.bool();
                    break;
                case /* string promo */ 19:
                    message.promo = reader.string();
                    break;
                case /* bool tradable */ 20:
                    message.tradable = reader.bool();
                    break;
                case /* common.v1.Rarity rarity */ 21:
                    message.rarity = reader.int32();
                    break;
                case /* string exchange */ 22:
                    message.exchange = reader.string();
                    break;
                case /* int64 supply */ 23:
                    message.supply = reader.int64().toBigInt();
                    break;
                case /* optional int64 max_supply */ 24:
                    message.maxSupply = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ItemDef, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string item_def_id = 1; */
        if (message.itemDefId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.itemDefId);
        /* int64 app_id = 2; */
        if (message.appId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.appId);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* string description = 4; */
        if (message.description !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.description);
        /* string type = 5; */
        if (message.type !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.type);
        /* string display_type = 6; */
        if (message.displayType !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.displayType);
        /* string bundle = 7; */
        if (message.bundle !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.bundle);
        /* string price = 8; */
        if (message.price !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.price);
        /* string icon_url = 9; */
        if (message.iconUrl !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.iconUrl);
        /* bool marketable = 10; */
        if (message.marketable !== false)
            writer.tag(10, WireType.Varint).bool(message.marketable);
        /* string tags = 11; */
        if (message.tags !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.tags);
        /* string store_tags = 12; */
        if (message.storeTags !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.storeTags);
        /* string store_images = 13; */
        if (message.storeImages !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.storeImages);
        /* string app_files = 14; */
        if (message.appFiles !== "")
            writer.tag(14, WireType.LengthDelimited).string(message.appFiles);
        /* string collection = 15; */
        if (message.collection !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.collection);
        /* bool hidden = 16; */
        if (message.hidden !== false)
            writer.tag(16, WireType.Varint).bool(message.hidden);
        /* bool store_hidden = 17; */
        if (message.storeHidden !== false)
            writer.tag(17, WireType.Varint).bool(message.storeHidden);
        /* bool game_only = 18; */
        if (message.gameOnly !== false)
            writer.tag(18, WireType.Varint).bool(message.gameOnly);
        /* string promo = 19; */
        if (message.promo !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.promo);
        /* bool tradable = 20; */
        if (message.tradable !== false)
            writer.tag(20, WireType.Varint).bool(message.tradable);
        /* common.v1.Rarity rarity = 21; */
        if (message.rarity !== 0)
            writer.tag(21, WireType.Varint).int32(message.rarity);
        /* string exchange = 22; */
        if (message.exchange !== "")
            writer.tag(22, WireType.LengthDelimited).string(message.exchange);
        /* int64 supply = 23; */
        if (message.supply !== 0n)
            writer.tag(23, WireType.Varint).int64(message.supply);
        /* optional int64 max_supply = 24; */
        if (message.maxSupply !== undefined)
            writer.tag(24, WireType.Varint).int64(message.maxSupply);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message registry.v1.ItemDef
 */
export const ItemDef = new ItemDef$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateItemDefRequest$Type extends MessageType<UpdateItemDefRequest> {
    constructor() {
        super("registry.v1.UpdateItemDefRequest", [
            { no: 1, name: "item_def_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "app_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "display_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "bundle", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "price", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "icon_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "marketable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "store_tags", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "store_images", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "app_files", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "collection", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "hidden", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "store_hidden", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 16, name: "game_only", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 17, name: "promo", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 18, name: "tradable", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 19, name: "exchange", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 20, name: "max_supply", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateItemDefRequest>): UpdateItemDefRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.itemDefId = "";
        message.appId = 0n;
        message.name = "";
        message.description = "";
        message.displayType = "";
        message.bundle = "";
        message.price = "";
        message.iconUrl = "";
        message.marketable = false;
        message.storeTags = "";
        message.storeImages = "";
        message.appFiles = "";
        message.collection = "";
        message.hidden = false;
        message.storeHidden = false;
        message.gameOnly = false;
        message.promo = "";
        message.tradable = false;
        message.exchange = "";
        if (value !== undefined)
            reflectionMergePartial<UpdateItemDefRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateItemDefRequest): UpdateItemDefRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string item_def_id */ 1:
                    message.itemDefId = reader.string();
                    break;
                case /* int64 app_id */ 2:
                    message.appId = reader.int64().toBigInt();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* string description */ 4:
                    message.description = reader.string();
                    break;
                case /* string display_type */ 5:
                    message.displayType = reader.string();
                    break;
                case /* string bundle */ 6:
                    message.bundle = reader.string();
                    break;
                case /* string price */ 7:
                    message.price = reader.string();
                    break;
                case /* string icon_url */ 8:
                    message.iconUrl = reader.string();
                    break;
                case /* bool marketable */ 9:
                    message.marketable = reader.bool();
                    break;
                case /* string store_tags */ 10:
                    message.storeTags = reader.string();
                    break;
                case /* string store_images */ 11:
                    message.storeImages = reader.string();
                    break;
                case /* string app_files */ 12:
                    message.appFiles = reader.string();
                    break;
                case /* string collection */ 13:
                    message.collection = reader.string();
                    break;
                case /* bool hidden */ 14:
                    message.hidden = reader.bool();
                    break;
                case /* bool store_hidden */ 15:
                    message.storeHidden = reader.bool();
                    break;
                case /* bool game_only */ 16:
                    message.gameOnly = reader.bool();
                    break;
                case /* string promo */ 17:
                    message.promo = reader.string();
                    break;
                case /* bool tradable */ 18:
                    message.tradable = reader.bool();
                    break;
                case /* string exchange */ 19:
                    message.exchange = reader.string();
                    break;
                case /* optional int64 max_supply */ 20:
                    message.maxSupply = reader.int64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateItemDefRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string item_def_id = 1; */
        if (message.itemDefId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.itemDefId);
        /* int64 app_id = 2; */
        if (message.appId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.appId);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* string description = 4; */
        if (message.description !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.description);
        /* string display_type = 5; */
        if (message.displayType !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.displayType);
        /* string bundle = 6; */
        if (message.bundle !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.bundle);
        /* string price = 7; */
        if (message.price !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.price);
        /* string icon_url = 8; */
        if (message.iconUrl !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.iconUrl);
        /* bool marketable = 9; */
        if (message.marketable !== false)
            writer.tag(9, WireType.Varint).bool(message.marketable);
        /* string store_tags = 10; */
        if (message.storeTags !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.storeTags);
        /* string store_images = 11; */
        if (message.storeImages !== "")
            writer.tag(11, WireType.LengthDelimited).string(message.storeImages);
        /* string app_files = 12; */
        if (message.appFiles !== "")
            writer.tag(12, WireType.LengthDelimited).string(message.appFiles);
        /* string collection = 13; */
        if (message.collection !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.collection);
        /* bool hidden = 14; */
        if (message.hidden !== false)
            writer.tag(14, WireType.Varint).bool(message.hidden);
        /* bool store_hidden = 15; */
        if (message.storeHidden !== false)
            writer.tag(15, WireType.Varint).bool(message.storeHidden);
        /* bool game_only = 16; */
        if (message.gameOnly !== false)
            writer.tag(16, WireType.Varint).bool(message.gameOnly);
        /* string promo = 17; */
        if (message.promo !== "")
            writer.tag(17, WireType.LengthDelimited).string(message.promo);
        /* bool tradable = 18; */
        if (message.tradable !== false)
            writer.tag(18, WireType.Varint).bool(message.tradable);
        /* string exchange = 19; */
        if (message.exchange !== "")
            writer.tag(19, WireType.LengthDelimited).string(message.exchange);
        /* optional int64 max_supply = 20; */
        if (message.maxSupply !== undefined)
            writer.tag(20, WireType.Varint).int64(message.maxSupply);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message registry.v1.UpdateItemDefRequest
 */
export const UpdateItemDefRequest = new UpdateItemDefRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AchievementDef$Type extends MessageType<AchievementDef> {
    constructor() {
        super("registry.v1.AchievementDef", [
            { no: 1, name: "achievement_def_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "app_id", kind: "scalar", T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "icon_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "tags", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "hidden", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "display_type", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AchievementDef>): AchievementDef {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.achievementDefId = "";
        message.appId = 0n;
        message.name = "";
        message.description = "";
        message.iconUrl = "";
        message.tags = "";
        message.hidden = false;
        message.displayType = "";
        if (value !== undefined)
            reflectionMergePartial<AchievementDef>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AchievementDef): AchievementDef {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string achievement_def_id */ 1:
                    message.achievementDefId = reader.string();
                    break;
                case /* int64 app_id */ 2:
                    message.appId = reader.int64().toBigInt();
                    break;
                case /* string name */ 3:
                    message.name = reader.string();
                    break;
                case /* string description */ 4:
                    message.description = reader.string();
                    break;
                case /* string icon_url */ 5:
                    message.iconUrl = reader.string();
                    break;
                case /* string tags */ 6:
                    message.tags = reader.string();
                    break;
                case /* bool hidden */ 7:
                    message.hidden = reader.bool();
                    break;
                case /* string display_type */ 8:
                    message.displayType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AchievementDef, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string achievement_def_id = 1; */
        if (message.achievementDefId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.achievementDefId);
        /* int64 app_id = 2; */
        if (message.appId !== 0n)
            writer.tag(2, WireType.Varint).int64(message.appId);
        /* string name = 3; */
        if (message.name !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.name);
        /* string description = 4; */
        if (message.description !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.description);
        /* string icon_url = 5; */
        if (message.iconUrl !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.iconUrl);
        /* string tags = 6; */
        if (message.tags !== "")
            writer.tag(6, WireType.LengthDelimited).string(message.tags);
        /* bool hidden = 7; */
        if (message.hidden !== false)
            writer.tag(7, WireType.Varint).bool(message.hidden);
        /* string display_type = 8; */
        if (message.displayType !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.displayType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message registry.v1.AchievementDef
 */
export const AchievementDef = new AchievementDef$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetItemDefRequest$Type extends MessageType<GetItemDefRequest> {
    constructor() {
        super("registry.v1.GetItemDefRequest", [
            { no: 1, name: "item_def_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetItemDefRequest>): GetItemDefRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.itemDefId = "";
        if (value !== undefined)
            reflectionMergePartial<GetItemDefRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetItemDefRequest): GetItemDefRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string item_def_id */ 1:
                    message.itemDefId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetItemDefRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string item_def_id = 1; */
        if (message.itemDefId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.itemDefId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message registry.v1.GetItemDefRequest
 */
export const GetItemDefRequest = new GetItemDefRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateItemDefRequest$Type extends MessageType<CreateItemDefRequest> {
    constructor() {
        super("registry.v1.CreateItemDefRequest", [
            { no: 1, name: "item_def", kind: "message", T: () => ItemDef }
        ]);
    }
    create(value?: PartialMessage<CreateItemDefRequest>): CreateItemDefRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateItemDefRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateItemDefRequest): CreateItemDefRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* registry.v1.ItemDef item_def */ 1:
                    message.itemDef = ItemDef.internalBinaryRead(reader, reader.uint32(), options, message.itemDef);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateItemDefRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* registry.v1.ItemDef item_def = 1; */
        if (message.itemDef)
            ItemDef.internalBinaryWrite(message.itemDef, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message registry.v1.CreateItemDefRequest
 */
export const CreateItemDefRequest = new CreateItemDefRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateItemDefResponse$Type extends MessageType<CreateItemDefResponse> {
    constructor() {
        super("registry.v1.CreateItemDefResponse", [
            { no: 1, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateItemDefResponse>): CreateItemDefResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = "";
        if (value !== undefined)
            reflectionMergePartial<CreateItemDefResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateItemDefResponse): CreateItemDefResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string status */ 1:
                    message.status = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateItemDefResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string status = 1; */
        if (message.status !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message registry.v1.CreateItemDefResponse
 */
export const CreateItemDefResponse = new CreateItemDefResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateItemDefResponse$Type extends MessageType<UpdateItemDefResponse> {
    constructor() {
        super("registry.v1.UpdateItemDefResponse", [
            { no: 1, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateItemDefResponse>): UpdateItemDefResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = "";
        if (value !== undefined)
            reflectionMergePartial<UpdateItemDefResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateItemDefResponse): UpdateItemDefResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string status */ 1:
                    message.status = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateItemDefResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string status = 1; */
        if (message.status !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message registry.v1.UpdateItemDefResponse
 */
export const UpdateItemDefResponse = new UpdateItemDefResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAchievementDefRequest$Type extends MessageType<GetAchievementDefRequest> {
    constructor() {
        super("registry.v1.GetAchievementDefRequest", [
            { no: 1, name: "achievement_def_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetAchievementDefRequest>): GetAchievementDefRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.achievementDefId = "";
        if (value !== undefined)
            reflectionMergePartial<GetAchievementDefRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAchievementDefRequest): GetAchievementDefRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string achievement_def_id */ 1:
                    message.achievementDefId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAchievementDefRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string achievement_def_id = 1; */
        if (message.achievementDefId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.achievementDefId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message registry.v1.GetAchievementDefRequest
 */
export const GetAchievementDefRequest = new GetAchievementDefRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateAchievementDefRequest$Type extends MessageType<CreateAchievementDefRequest> {
    constructor() {
        super("registry.v1.CreateAchievementDefRequest", [
            { no: 1, name: "achievement_def", kind: "message", T: () => AchievementDef }
        ]);
    }
    create(value?: PartialMessage<CreateAchievementDefRequest>): CreateAchievementDefRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<CreateAchievementDefRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateAchievementDefRequest): CreateAchievementDefRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* registry.v1.AchievementDef achievement_def */ 1:
                    message.achievementDef = AchievementDef.internalBinaryRead(reader, reader.uint32(), options, message.achievementDef);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateAchievementDefRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* registry.v1.AchievementDef achievement_def = 1; */
        if (message.achievementDef)
            AchievementDef.internalBinaryWrite(message.achievementDef, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message registry.v1.CreateAchievementDefRequest
 */
export const CreateAchievementDefRequest = new CreateAchievementDefRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateAchievementDefResponse$Type extends MessageType<CreateAchievementDefResponse> {
    constructor() {
        super("registry.v1.CreateAchievementDefResponse", [
            { no: 1, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateAchievementDefResponse>): CreateAchievementDefResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = "";
        if (value !== undefined)
            reflectionMergePartial<CreateAchievementDefResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateAchievementDefResponse): CreateAchievementDefResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string status */ 1:
                    message.status = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateAchievementDefResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string status = 1; */
        if (message.status !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message registry.v1.CreateAchievementDefResponse
 */
export const CreateAchievementDefResponse = new CreateAchievementDefResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateAchievementDefRequest$Type extends MessageType<UpdateAchievementDefRequest> {
    constructor() {
        super("registry.v1.UpdateAchievementDefRequest", [
            { no: 1, name: "achievement_def", kind: "message", T: () => AchievementDef }
        ]);
    }
    create(value?: PartialMessage<UpdateAchievementDefRequest>): UpdateAchievementDefRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdateAchievementDefRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateAchievementDefRequest): UpdateAchievementDefRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* registry.v1.AchievementDef achievement_def */ 1:
                    message.achievementDef = AchievementDef.internalBinaryRead(reader, reader.uint32(), options, message.achievementDef);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateAchievementDefRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* registry.v1.AchievementDef achievement_def = 1; */
        if (message.achievementDef)
            AchievementDef.internalBinaryWrite(message.achievementDef, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message registry.v1.UpdateAchievementDefRequest
 */
export const UpdateAchievementDefRequest = new UpdateAchievementDefRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateAchievementDefResponse$Type extends MessageType<UpdateAchievementDefResponse> {
    constructor() {
        super("registry.v1.UpdateAchievementDefResponse", [
            { no: 1, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdateAchievementDefResponse>): UpdateAchievementDefResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = "";
        if (value !== undefined)
            reflectionMergePartial<UpdateAchievementDefResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateAchievementDefResponse): UpdateAchievementDefResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string status */ 1:
                    message.status = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateAchievementDefResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string status = 1; */
        if (message.status !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message registry.v1.UpdateAchievementDefResponse
 */
export const UpdateAchievementDefResponse = new UpdateAchievementDefResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListItemDefsRequest$Type extends MessageType<ListItemDefsRequest> {
    constructor() {
        super("registry.v1.ListItemDefsRequest", [
            { no: 1, name: "limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "offset", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "collection", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "rarity", kind: "enum", opt: true, T: () => ["common.v1.Rarity", Rarity] },
            { no: 6, name: "type", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "display_type", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "hidden", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "game_only", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "store_hidden", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "tradable", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "supply", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "sort_fields", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "directions", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListItemDefsRequest>): ListItemDefsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.limit = 0;
        message.offset = 0;
        message.sortFields = [];
        message.directions = [];
        if (value !== undefined)
            reflectionMergePartial<ListItemDefsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListItemDefsRequest): ListItemDefsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 limit */ 1:
                    message.limit = reader.int32();
                    break;
                case /* int32 offset */ 2:
                    message.offset = reader.int32();
                    break;
                case /* optional string collection */ 3:
                    message.collection = reader.string();
                    break;
                case /* optional string name */ 4:
                    message.name = reader.string();
                    break;
                case /* optional common.v1.Rarity rarity */ 5:
                    message.rarity = reader.int32();
                    break;
                case /* optional string type */ 6:
                    message.type = reader.string();
                    break;
                case /* optional string display_type */ 7:
                    message.displayType = reader.string();
                    break;
                case /* optional string hidden */ 8:
                    message.hidden = reader.string();
                    break;
                case /* optional string game_only */ 9:
                    message.gameOnly = reader.string();
                    break;
                case /* optional string store_hidden */ 10:
                    message.storeHidden = reader.string();
                    break;
                case /* optional string tradable */ 11:
                    message.tradable = reader.string();
                    break;
                case /* optional int64 supply */ 12:
                    message.supply = reader.int64().toBigInt();
                    break;
                case /* repeated string sort_fields */ 13:
                    message.sortFields.push(reader.string());
                    break;
                case /* repeated string directions */ 14:
                    message.directions.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListItemDefsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 limit = 1; */
        if (message.limit !== 0)
            writer.tag(1, WireType.Varint).int32(message.limit);
        /* int32 offset = 2; */
        if (message.offset !== 0)
            writer.tag(2, WireType.Varint).int32(message.offset);
        /* optional string collection = 3; */
        if (message.collection !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.collection);
        /* optional string name = 4; */
        if (message.name !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.name);
        /* optional common.v1.Rarity rarity = 5; */
        if (message.rarity !== undefined)
            writer.tag(5, WireType.Varint).int32(message.rarity);
        /* optional string type = 6; */
        if (message.type !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.type);
        /* optional string display_type = 7; */
        if (message.displayType !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.displayType);
        /* optional string hidden = 8; */
        if (message.hidden !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.hidden);
        /* optional string game_only = 9; */
        if (message.gameOnly !== undefined)
            writer.tag(9, WireType.LengthDelimited).string(message.gameOnly);
        /* optional string store_hidden = 10; */
        if (message.storeHidden !== undefined)
            writer.tag(10, WireType.LengthDelimited).string(message.storeHidden);
        /* optional string tradable = 11; */
        if (message.tradable !== undefined)
            writer.tag(11, WireType.LengthDelimited).string(message.tradable);
        /* optional int64 supply = 12; */
        if (message.supply !== undefined)
            writer.tag(12, WireType.Varint).int64(message.supply);
        /* repeated string sort_fields = 13; */
        for (let i = 0; i < message.sortFields.length; i++)
            writer.tag(13, WireType.LengthDelimited).string(message.sortFields[i]);
        /* repeated string directions = 14; */
        for (let i = 0; i < message.directions.length; i++)
            writer.tag(14, WireType.LengthDelimited).string(message.directions[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message registry.v1.ListItemDefsRequest
 */
export const ListItemDefsRequest = new ListItemDefsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListItemDefsResponse$Type extends MessageType<ListItemDefsResponse> {
    constructor() {
        super("registry.v1.ListItemDefsResponse", [
            { no: 1, name: "items", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ItemDef },
            { no: 2, name: "pagination", kind: "message", T: () => Pagination }
        ]);
    }
    create(value?: PartialMessage<ListItemDefsResponse>): ListItemDefsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.items = [];
        if (value !== undefined)
            reflectionMergePartial<ListItemDefsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListItemDefsResponse): ListItemDefsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated registry.v1.ItemDef items */ 1:
                    message.items.push(ItemDef.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* common.v1.Pagination pagination */ 2:
                    message.pagination = Pagination.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListItemDefsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated registry.v1.ItemDef items = 1; */
        for (let i = 0; i < message.items.length; i++)
            ItemDef.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* common.v1.Pagination pagination = 2; */
        if (message.pagination)
            Pagination.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message registry.v1.ListItemDefsResponse
 */
export const ListItemDefsResponse = new ListItemDefsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListAchievementsRequest$Type extends MessageType<ListAchievementsRequest> {
    constructor() {
        super("registry.v1.ListAchievementsRequest", [
            { no: 1, name: "limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "offset", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ListAchievementsRequest>): ListAchievementsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.limit = 0;
        message.offset = 0;
        if (value !== undefined)
            reflectionMergePartial<ListAchievementsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListAchievementsRequest): ListAchievementsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 limit */ 1:
                    message.limit = reader.int32();
                    break;
                case /* int32 offset */ 2:
                    message.offset = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListAchievementsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 limit = 1; */
        if (message.limit !== 0)
            writer.tag(1, WireType.Varint).int32(message.limit);
        /* int32 offset = 2; */
        if (message.offset !== 0)
            writer.tag(2, WireType.Varint).int32(message.offset);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message registry.v1.ListAchievementsRequest
 */
export const ListAchievementsRequest = new ListAchievementsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListAchievementsResponse$Type extends MessageType<ListAchievementsResponse> {
    constructor() {
        super("registry.v1.ListAchievementsResponse", [
            { no: 1, name: "items", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => AchievementDef },
            { no: 2, name: "pagination", kind: "message", T: () => Pagination }
        ]);
    }
    create(value?: PartialMessage<ListAchievementsResponse>): ListAchievementsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.items = [];
        if (value !== undefined)
            reflectionMergePartial<ListAchievementsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListAchievementsResponse): ListAchievementsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated registry.v1.AchievementDef items */ 1:
                    message.items.push(AchievementDef.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* common.v1.Pagination pagination */ 2:
                    message.pagination = Pagination.internalBinaryRead(reader, reader.uint32(), options, message.pagination);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListAchievementsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated registry.v1.AchievementDef items = 1; */
        for (let i = 0; i < message.items.length; i++)
            AchievementDef.internalBinaryWrite(message.items[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* common.v1.Pagination pagination = 2; */
        if (message.pagination)
            Pagination.internalBinaryWrite(message.pagination, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message registry.v1.ListAchievementsResponse
 */
export const ListAchievementsResponse = new ListAchievementsResponse$Type();
/**
 * @generated ServiceType for protobuf service registry.v1.RegistryService
 */
export const RegistryService = new ServiceType("registry.v1.RegistryService", [
    { name: "GetItemDef", options: {}, I: GetItemDefRequest, O: ItemDef },
    { name: "CreateItemDef", options: {}, I: CreateItemDefRequest, O: CreateItemDefResponse },
    { name: "UpdateItemDef", options: {}, I: UpdateItemDefRequest, O: UpdateItemDefResponse },
    { name: "GetAchievementDef", options: {}, I: GetAchievementDefRequest, O: AchievementDef },
    { name: "CreateAchievementDef", options: {}, I: CreateAchievementDefRequest, O: CreateAchievementDefResponse },
    { name: "UpdateAchievementDef", options: {}, I: UpdateAchievementDefRequest, O: UpdateAchievementDefResponse },
    { name: "ListItemDefs", options: {}, I: ListItemDefsRequest, O: ListItemDefsResponse },
    { name: "ListAchievements", options: {}, I: ListAchievementsRequest, O: ListAchievementsResponse }
]);
