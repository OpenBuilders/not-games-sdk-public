// @generated by protobuf-ts 2.11.1 with parameter add_pb_suffix
// @generated from protobuf file "common/tags.proto" (package "common.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message common.v1.FilterTagList
 */
export interface FilterTagList {
    /**
     * @generated from protobuf field: repeated common.v1.FilterTag values = 1
     */
    values: FilterTag[];
}
/**
 * @generated from protobuf message common.v1.FilterTag
 */
export interface FilterTag {
    /**
     * @generated from protobuf field: string tag_name = 1
     */
    tagName: string;
    /**
     * @generated from protobuf field: string operation = 2
     */
    operation: string;
    /**
     * @generated from protobuf field: optional string value = 3
     */
    value?: string;
    /**
     * @generated from protobuf field: optional string attribute = 4
     */
    attribute?: string;
    /**
     * @generated from protobuf field: optional string data_type = 5
     */
    dataType?: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class FilterTagList$Type extends MessageType<FilterTagList> {
    constructor() {
        super("common.v1.FilterTagList", [
            { no: 1, name: "values", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => FilterTag }
        ]);
    }
    create(value?: PartialMessage<FilterTagList>): FilterTagList {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.values = [];
        if (value !== undefined)
            reflectionMergePartial<FilterTagList>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FilterTagList): FilterTagList {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated common.v1.FilterTag values */ 1:
                    message.values.push(FilterTag.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FilterTagList, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated common.v1.FilterTag values = 1; */
        for (let i = 0; i < message.values.length; i++)
            FilterTag.internalBinaryWrite(message.values[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message common.v1.FilterTagList
 */
export const FilterTagList = new FilterTagList$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FilterTag$Type extends MessageType<FilterTag> {
    constructor() {
        super("common.v1.FilterTag", [
            { no: 1, name: "tag_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "operation", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "value", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "attribute", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "data_type", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FilterTag>): FilterTag {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.tagName = "";
        message.operation = "";
        if (value !== undefined)
            reflectionMergePartial<FilterTag>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FilterTag): FilterTag {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string tag_name */ 1:
                    message.tagName = reader.string();
                    break;
                case /* string operation */ 2:
                    message.operation = reader.string();
                    break;
                case /* optional string value */ 3:
                    message.value = reader.string();
                    break;
                case /* optional string attribute */ 4:
                    message.attribute = reader.string();
                    break;
                case /* optional string data_type */ 5:
                    message.dataType = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FilterTag, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string tag_name = 1; */
        if (message.tagName !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.tagName);
        /* string operation = 2; */
        if (message.operation !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.operation);
        /* optional string value = 3; */
        if (message.value !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.value);
        /* optional string attribute = 4; */
        if (message.attribute !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.attribute);
        /* optional string data_type = 5; */
        if (message.dataType !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.dataType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message common.v1.FilterTag
 */
export const FilterTag = new FilterTag$Type();
