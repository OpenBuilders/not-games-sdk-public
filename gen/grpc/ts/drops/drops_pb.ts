// @generated by protobuf-ts 2.11.1 with parameter add_pb_suffix
// @generated from protobuf file "drops/drops.proto" (package "drops.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "../google/protobuf/timestamp_pb";
/**
 * @generated from protobuf message drops.v1.CreateDropRequest
 */
export interface CreateDropRequest {
    /**
     * @generated from protobuf field: string description = 1
     */
    description: string;
    /**
     * @generated from protobuf field: string item_def_ids = 2
     */
    itemDefIds: string;
    /**
     * @generated from protobuf field: bool whitelist = 3
     */
    whitelist: boolean;
    /**
     * @generated from protobuf field: bool random_pick = 4
     */
    randomPick: boolean;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp available_at = 5
     */
    availableAt?: Timestamp;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp finished_at = 6
     */
    finishedAt?: Timestamp;
    /**
     * @generated from protobuf field: repeated int64 whitelist_user_ids = 7
     */
    whitelistUserIds: bigint[];
}
/**
 * @generated from protobuf message drops.v1.CreateDropResponse
 */
export interface CreateDropResponse {
    /**
     * @generated from protobuf field: string drop_id = 1
     */
    dropId: string;
}
/**
 * @generated from protobuf message drops.v1.CheckEligibilityRequest
 */
export interface CheckEligibilityRequest {
    /**
     * @generated from protobuf field: string drop_id = 1
     */
    dropId: string;
}
/**
 * @generated from protobuf message drops.v1.CheckEligibilityResponse
 */
export interface CheckEligibilityResponse {
    /**
     * @generated from protobuf field: string status = 1
     */
    status: string;
}
/**
 * @generated from protobuf message drops.v1.WhitelistDropUserRequest
 */
export interface WhitelistDropUserRequest {
    /**
     * @generated from protobuf field: string drop_id = 1
     */
    dropId: string;
    /**
     * @generated from protobuf field: repeated int64 user_ids = 2
     */
    userIds: bigint[];
}
/**
 * @generated from protobuf message drops.v1.WhitelistDropUserResponse
 */
export interface WhitelistDropUserResponse {
    /**
     * @generated from protobuf field: string status = 1
     */
    status: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class CreateDropRequest$Type extends MessageType<CreateDropRequest> {
    constructor() {
        super("drops.v1.CreateDropRequest", [
            { no: 1, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "item_def_ids", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "whitelist", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "random_pick", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "available_at", kind: "message", T: () => Timestamp },
            { no: 6, name: "finished_at", kind: "message", T: () => Timestamp },
            { no: 7, name: "whitelist_user_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CreateDropRequest>): CreateDropRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.description = "";
        message.itemDefIds = "";
        message.whitelist = false;
        message.randomPick = false;
        message.whitelistUserIds = [];
        if (value !== undefined)
            reflectionMergePartial<CreateDropRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateDropRequest): CreateDropRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string description */ 1:
                    message.description = reader.string();
                    break;
                case /* string item_def_ids */ 2:
                    message.itemDefIds = reader.string();
                    break;
                case /* bool whitelist */ 3:
                    message.whitelist = reader.bool();
                    break;
                case /* bool random_pick */ 4:
                    message.randomPick = reader.bool();
                    break;
                case /* google.protobuf.Timestamp available_at */ 5:
                    message.availableAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.availableAt);
                    break;
                case /* google.protobuf.Timestamp finished_at */ 6:
                    message.finishedAt = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.finishedAt);
                    break;
                case /* repeated int64 whitelist_user_ids */ 7:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.whitelistUserIds.push(reader.int64().toBigInt());
                    else
                        message.whitelistUserIds.push(reader.int64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateDropRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string description = 1; */
        if (message.description !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.description);
        /* string item_def_ids = 2; */
        if (message.itemDefIds !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.itemDefIds);
        /* bool whitelist = 3; */
        if (message.whitelist !== false)
            writer.tag(3, WireType.Varint).bool(message.whitelist);
        /* bool random_pick = 4; */
        if (message.randomPick !== false)
            writer.tag(4, WireType.Varint).bool(message.randomPick);
        /* google.protobuf.Timestamp available_at = 5; */
        if (message.availableAt)
            Timestamp.internalBinaryWrite(message.availableAt, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* google.protobuf.Timestamp finished_at = 6; */
        if (message.finishedAt)
            Timestamp.internalBinaryWrite(message.finishedAt, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated int64 whitelist_user_ids = 7; */
        if (message.whitelistUserIds.length) {
            writer.tag(7, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.whitelistUserIds.length; i++)
                writer.int64(message.whitelistUserIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message drops.v1.CreateDropRequest
 */
export const CreateDropRequest = new CreateDropRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateDropResponse$Type extends MessageType<CreateDropResponse> {
    constructor() {
        super("drops.v1.CreateDropResponse", [
            { no: 1, name: "drop_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateDropResponse>): CreateDropResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.dropId = "";
        if (value !== undefined)
            reflectionMergePartial<CreateDropResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateDropResponse): CreateDropResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string drop_id */ 1:
                    message.dropId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateDropResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string drop_id = 1; */
        if (message.dropId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.dropId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message drops.v1.CreateDropResponse
 */
export const CreateDropResponse = new CreateDropResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CheckEligibilityRequest$Type extends MessageType<CheckEligibilityRequest> {
    constructor() {
        super("drops.v1.CheckEligibilityRequest", [
            { no: 1, name: "drop_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CheckEligibilityRequest>): CheckEligibilityRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.dropId = "";
        if (value !== undefined)
            reflectionMergePartial<CheckEligibilityRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CheckEligibilityRequest): CheckEligibilityRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string drop_id */ 1:
                    message.dropId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CheckEligibilityRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string drop_id = 1; */
        if (message.dropId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.dropId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message drops.v1.CheckEligibilityRequest
 */
export const CheckEligibilityRequest = new CheckEligibilityRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CheckEligibilityResponse$Type extends MessageType<CheckEligibilityResponse> {
    constructor() {
        super("drops.v1.CheckEligibilityResponse", [
            { no: 1, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CheckEligibilityResponse>): CheckEligibilityResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = "";
        if (value !== undefined)
            reflectionMergePartial<CheckEligibilityResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CheckEligibilityResponse): CheckEligibilityResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string status */ 1:
                    message.status = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CheckEligibilityResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string status = 1; */
        if (message.status !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message drops.v1.CheckEligibilityResponse
 */
export const CheckEligibilityResponse = new CheckEligibilityResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WhitelistDropUserRequest$Type extends MessageType<WhitelistDropUserRequest> {
    constructor() {
        super("drops.v1.WhitelistDropUserRequest", [
            { no: 1, name: "drop_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "user_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<WhitelistDropUserRequest>): WhitelistDropUserRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.dropId = "";
        message.userIds = [];
        if (value !== undefined)
            reflectionMergePartial<WhitelistDropUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WhitelistDropUserRequest): WhitelistDropUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string drop_id */ 1:
                    message.dropId = reader.string();
                    break;
                case /* repeated int64 user_ids */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.userIds.push(reader.int64().toBigInt());
                    else
                        message.userIds.push(reader.int64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WhitelistDropUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string drop_id = 1; */
        if (message.dropId !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.dropId);
        /* repeated int64 user_ids = 2; */
        if (message.userIds.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.userIds.length; i++)
                writer.int64(message.userIds[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message drops.v1.WhitelistDropUserRequest
 */
export const WhitelistDropUserRequest = new WhitelistDropUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WhitelistDropUserResponse$Type extends MessageType<WhitelistDropUserResponse> {
    constructor() {
        super("drops.v1.WhitelistDropUserResponse", [
            { no: 1, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<WhitelistDropUserResponse>): WhitelistDropUserResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.status = "";
        if (value !== undefined)
            reflectionMergePartial<WhitelistDropUserResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WhitelistDropUserResponse): WhitelistDropUserResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string status */ 1:
                    message.status = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WhitelistDropUserResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string status = 1; */
        if (message.status !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.status);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message drops.v1.WhitelistDropUserResponse
 */
export const WhitelistDropUserResponse = new WhitelistDropUserResponse$Type();
/**
 * @generated ServiceType for protobuf service drops.v1.DropsService
 */
export const DropsService = new ServiceType("drops.v1.DropsService", [
    { name: "CreateDrop", options: {}, I: CreateDropRequest, O: CreateDropResponse },
    { name: "CheckEligibility", options: {}, I: CheckEligibilityRequest, O: CheckEligibilityResponse },
    { name: "WhitelistDropUser", options: {}, I: WhitelistDropUserRequest, O: WhitelistDropUserResponse }
]);
