/*
Swagger for Not Platform

Testing RegistryAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package not-games-sdk-public

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_not-games-sdk-public_RegistryAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RegistryAPIService RegistryAchievementsAchievementDefIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var achievementDefId string

		resp, httpRes, err := apiClient.RegistryAPI.RegistryAchievementsAchievementDefIdDelete(context.Background(), achievementDefId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RegistryAPIService RegistryAchievementsAchievementDefIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var achievementDefId string

		resp, httpRes, err := apiClient.RegistryAPI.RegistryAchievementsAchievementDefIdGet(context.Background(), achievementDefId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RegistryAPIService RegistryAchievementsAchievementDefIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var achievementDefId string

		resp, httpRes, err := apiClient.RegistryAPI.RegistryAchievementsAchievementDefIdPut(context.Background(), achievementDefId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RegistryAPIService RegistryAchievementsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RegistryAPI.RegistryAchievementsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RegistryAPIService RegistryAchievementsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RegistryAPI.RegistryAchievementsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RegistryAPIService RegistryAppsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RegistryAPI.RegistryAppsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RegistryAPIService RegistryItemsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RegistryAPI.RegistryItemsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RegistryAPIService RegistryItemsItemDefIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemDefId string

		resp, httpRes, err := apiClient.RegistryAPI.RegistryItemsItemDefIdDelete(context.Background(), itemDefId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RegistryAPIService RegistryItemsItemDefIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemDefId string

		resp, httpRes, err := apiClient.RegistryAPI.RegistryItemsItemDefIdGet(context.Background(), itemDefId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RegistryAPIService RegistryItemsItemDefIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var itemDefId string

		resp, httpRes, err := apiClient.RegistryAPI.RegistryItemsItemDefIdPut(context.Background(), itemDefId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RegistryAPIService RegistryItemsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RegistryAPI.RegistryItemsPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
